{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_administartion\\\\_logging\\\\loggingDataService.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useApi from '../../../_hooks/useApi';\nimport LoggingPageContainer from './loggingPageContainer';\nimport apiConfig from '../../../_config/apiConfig.json';\nimport { getLogMessageRow } from '../mapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoggingDataservice = props => {\n  _s();\n\n  const logDataService = useApi({\n    serviceUri: apiConfig.baseUrl + apiConfig.administration.logging,\n    params: null\n  });\n  const [selectedItems, setSelectedItems] = React.useState({\n    allSelected: false,\n    ids: []\n  });\n  const logMessageRows = React.useMemo(() => {\n    return logDataService.items.map(item => {\n      return getLogMessageRow(item);\n    });\n  }, [logDataService]);\n  const handleSelectedItemsChanged = React.useCallback(items => {\n    setSelectedItems({\n      allSelected: logMessageRows.length === items.length,\n      ids: items\n    });\n  }, [selectedItems]);\n  const handleSelectAll = React.useCallback(() => {// if(selectedItems.length === logMessageRows.length){\n    //     const state = [true, []]\n    //     setSelectedItems(state)\n    // }else{\n    //     const ids = logMessageRows.map((msg) =>{\n    //         return msg.id\n    //     })\n    //     const state = [false, ids]\n    //     setSelectedItems(state)\n    // }\n  }, [logMessageRows, selectedItems.length]);\n\n  if (logDataService.items[0] === undefined) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(LoggingPageContainer, {\n    logmessages: logMessageRows,\n    selectedItems: selectedItems,\n    handleSelectedItems: handleSelectedItemsChanged,\n    handleSelectAll: handleSelectAll\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoggingDataservice, \"K8pDz+DdwdtQS6CqhND3ycEh8y8=\", false, function () {\n  return [useApi];\n});\n\n_c = LoggingDataservice;\nexport default LoggingDataservice;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggingDataservice\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingDataService.tsx"],"names":["React","useApi","LoggingPageContainer","apiConfig","getLogMessageRow","LoggingDataservice","props","logDataService","serviceUri","baseUrl","administration","logging","params","selectedItems","setSelectedItems","useState","allSelected","ids","logMessageRows","useMemo","items","map","item","handleSelectedItemsChanged","useCallback","length","handleSelectAll","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,gBAAT,QAAiC,WAAjC;;;AAUA,MAAMC,kBAAoC,GAAIC,KAAD,IAAU;AAAA;;AAEnD,QAAMC,cAAc,GAAGN,MAAM,CAAc;AACvCO,IAAAA,UAAU,EAAEL,SAAS,CAACM,OAAV,GAAoBN,SAAS,CAACO,cAAV,CAAyBC,OADlB;AAEvCC,IAAAA,MAAM,EAAE;AAF+B,GAAd,CAA7B;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,KAAK,CAACe,QAAN,CAAqC;AAACC,IAAAA,WAAW,EAAE,KAAd;AAAqBC,IAAAA,GAAG,EAAC;AAAzB,GAArC,CAA1C;AAEA,QAAMC,cAAc,GAAGlB,KAAK,CAACmB,OAAN,CAAc,MAAK;AACtC,WAAOZ,cAAc,CAACa,KAAf,CAAqBC,GAArB,CAA0BC,IAAD,IAAS;AACrC,aAAOlB,gBAAgB,CAACkB,IAAD,CAAvB;AACH,KAFM,CAAP;AAGH,GAJsB,EAIrB,CAACf,cAAD,CAJqB,CAAvB;AAMA,QAAMgB,0BAA0B,GAAGvB,KAAK,CAACwB,WAAN,CAAmBJ,KAAD,IAAoB;AACrEN,IAAAA,gBAAgB,CAAC;AAACE,MAAAA,WAAW,EAAEE,cAAc,CAACO,MAAf,KAA0BL,KAAK,CAACK,MAA9C;AAAsDR,MAAAA,GAAG,EAAEG;AAA3D,KAAD,CAAhB;AACH,GAFkC,EAEjC,CAACP,aAAD,CAFiC,CAAnC;AAIA,QAAMa,eAAe,GAAG1B,KAAK,CAACwB,WAAN,CAAkB,MAAM,CAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAXuB,EAWtB,CAACN,cAAD,EAAiBL,aAAa,CAACY,MAA/B,CAXsB,CAAxB;;AAaA,MAAGlB,cAAc,CAACa,KAAf,CAAqB,CAArB,MAA4BO,SAA/B,EAAyC;AACrC,WAAO,IAAP;AACH;;AAED,sBACI,QAAC,oBAAD;AACI,IAAA,WAAW,EAAET,cADjB;AAEI,IAAA,aAAa,EAAEL,aAFnB;AAGI,IAAA,mBAAmB,EAAEU,0BAHzB;AAII,IAAA,eAAe,EAAEG;AAJrB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA5CD;;GAAMrB,kB;UAEqBJ,M;;;KAFrBI,kB;AA8CN,eAAeA,kBAAf","sourcesContent":["import React from 'react'\r\nimport useApi from '../../../_hooks/useApi'\r\nimport { ILogmessage } from './interfaces/ILogmessage'\r\nimport LoggingPageContainer from './loggingPageContainer'\r\nimport apiConfig from '../../../_config/apiConfig.json'\r\nimport { getLogMessageRow } from '../mapper'\r\n\r\nexport interface logMessageTableState{\r\n    allSelected: boolean\r\n    ids: number[] \r\n}\r\ninterface IProps{\r\n\r\n}\r\n\r\nconst LoggingDataservice: React.FC<IProps> = (props) =>{\r\n   \r\n    const logDataService = useApi<ILogmessage>({\r\n        serviceUri: apiConfig.baseUrl + apiConfig.administration.logging,\r\n        params: null\r\n    })\r\n\r\n    const [selectedItems, setSelectedItems] = React.useState<logMessageTableState>({allSelected: false, ids:[]})\r\n\r\n    const logMessageRows = React.useMemo(() =>{\r\n        return logDataService.items.map((item) =>{\r\n            return getLogMessageRow(item)\r\n        })\r\n    },[logDataService])\r\n\r\n    const handleSelectedItemsChanged = React.useCallback((items: number[]) =>{\r\n        setSelectedItems({allSelected: logMessageRows.length === items.length, ids: items})\r\n    },[selectedItems])\r\n\r\n    const handleSelectAll = React.useCallback(() => {\r\n        // if(selectedItems.length === logMessageRows.length){\r\n        //     const state = [true, []]\r\n        //     setSelectedItems(state)\r\n        // }else{\r\n        //     const ids = logMessageRows.map((msg) =>{\r\n        //         return msg.id\r\n        //     })\r\n        //     const state = [false, ids]\r\n        //     setSelectedItems(state)\r\n        // }\r\n    },[logMessageRows, selectedItems.length])\r\n   \r\n    if(logDataService.items[0] === undefined){\r\n        return null\r\n    }\r\n    \r\n    return(\r\n        <LoggingPageContainer\r\n            logmessages={logMessageRows}\r\n            selectedItems={selectedItems}\r\n            handleSelectedItems={handleSelectedItemsChanged}\r\n            handleSelectAll={handleSelectAll}\r\n            />\r\n    )\r\n}\r\n\r\nexport default LoggingDataservice\r\n"]},"metadata":{},"sourceType":"module"}