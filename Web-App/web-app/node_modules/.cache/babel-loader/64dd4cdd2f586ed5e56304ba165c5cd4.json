{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_components\\\\_inputs\\\\ImageInput.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { useImageUpload } from '../../_hooks/useImageUpload';\nimport noImg from '../../img/no-pic.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImageInput = props => {\n  _s();\n\n  const {\n    isReadOnly,\n    width,\n    height,\n    src\n  } = props;\n  const [imageSrc, setImageSrc] = React.useState(src !== null && src !== void 0 ? src : noImg);\n  const imageService = useImageUpload();\n  const handleChange = React.useCallback(async e => {\n    if (e.target.files !== null && e.target.files[0]) {\n      const file = e.target.files[0];\n      await imageService.getBase64(file).then(() => {\n        var _imageService$buffer;\n\n        setImageSrc((_imageService$buffer = imageService.buffer) === null || _imageService$buffer === void 0 ? void 0 : _imageService$buffer.toString());\n      });\n    }\n  }, [imageService]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      width: width,\n      height: height,\n      src: imageSrc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), !isReadOnly && /*#__PURE__*/_jsxDEV(TextField, {\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ImageInput, \"D7riPm1xwa7wfZxv9MngxSsn9Fc=\", false, function () {\n  return [useImageUpload];\n});\n\n_c = ImageInput;\nexport default ImageInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageInput\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_components/_inputs/ImageInput.tsx"],"names":["Grid","TextField","React","useImageUpload","noImg","ImageInput","props","isReadOnly","width","height","src","imageSrc","setImageSrc","useState","imageService","handleChange","useCallback","e","target","files","file","getBase64","then","buffer","toString"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,SAAf,QAAgC,mBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;AACA,OAAOC,KAAP,MAAkB,sBAAlB;;;AASA,MAAMC,UAA4B,GAAIC,KAAD,IAAU;AAAA;;AAE3C,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B,MAAmCJ,KAAzC;AAEA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BV,KAAK,CAACW,QAAN,CAAmCH,GAAnC,aAAmCA,GAAnC,cAAmCA,GAAnC,GAAyCN,KAAzC,CAAhC;AAEA,QAAMU,YAAY,GAAGX,cAAc,EAAnC;AAEA,QAAMY,YAAY,GAAGb,KAAK,CAACc,WAAN,CAAkB,MAAOC,CAAP,IAAiD;AAEpF,QAAGA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,IAAnB,IAA2BF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAA9B,EAAgD;AAE5C,YAAMC,IAAI,GAAGH,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,YAAML,YAAY,CAACO,SAAb,CAAuBD,IAAvB,EACLE,IADK,CACA,MAAK;AAAA;;AACPV,QAAAA,WAAW,yBAACE,YAAY,CAACS,MAAd,yDAAC,qBAAqBC,QAArB,EAAD,CAAX;AACH,OAHK,CAAN;AAMH;AAEJ,GAboB,EAanB,CAACV,YAAD,CAbmB,CAArB;AAeA,sBACI,QAAC,IAAD;AACI,IAAA,IAAI,MADR;AAAA,4BAEI;AAAK,MAAA,KAAK,EAAEN,KAAZ;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAmC,MAAA,GAAG,EAAEE;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGK,CAACJ,UAAD,iBACG,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAEQ;AAAjC;AAAA;AAAA;AAAA;AAAA,YAJR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAhCD;;GAAMV,U;UAMmBF,c;;;KANnBE,U;AAkCN,eAAeA,UAAf","sourcesContent":["import { Grid, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport {useImageUpload} from '../../_hooks/useImageUpload'\r\nimport noImg from '../../img/no-pic.png'\r\n\r\ninterface IProps{\r\n    isReadOnly: boolean\r\n    width: number\r\n    height: number\r\n    src?: string\r\n}\r\n\r\nconst ImageInput: React.FC<IProps> = (props) =>{\r\n\r\n    const {isReadOnly, width, height, src} = props\r\n\r\n    const [imageSrc, setImageSrc] = React.useState<string | undefined>(src?? noImg)\r\n    \r\n    const imageService = useImageUpload()\r\n\r\n    const handleChange = React.useCallback(async (e: React.ChangeEvent<HTMLInputElement>) =>{\r\n        \r\n        if(e.target.files !== null && e.target.files[0]){\r\n           \r\n            const file = e.target.files[0]\r\n            await imageService.getBase64(file)\r\n            .then(() =>{\r\n                setImageSrc(imageService.buffer?.toString())\r\n            }) \r\n            \r\n           \r\n        }\r\n\r\n    },[imageService])\r\n\r\n    return(\r\n        <Grid\r\n            item>\r\n            <img width={width} height={height} src={imageSrc}/>\r\n            {!isReadOnly && (\r\n                <TextField type='file' onChange={handleChange}/>\r\n            )}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ImageInput"]},"metadata":{},"sourceType":"module"}