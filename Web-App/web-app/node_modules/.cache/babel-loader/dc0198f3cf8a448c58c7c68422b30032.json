{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from 'react';\n\nconst useApi = options => {\n  _s();\n\n  const [apiOptions, setApiOptions] = React.useState(options);\n  const [items, setItems] = React.useState([]);\n  const [isLoading, setIsloading] = React.useState(false);\n\n  const resolve = async res => {\n    Promise.resolve(res.json()).then(data => {\n      var responsItems = [];\n\n      if (Array.isArray(data)) {\n        responsItems = JSON.parse(JSON.stringify(data));\n        setItems(responsItems);\n        return;\n      }\n\n      var item = JSON.parse(JSON.stringify(data));\n      responsItems.push(item);\n      setItems(responsItems);\n    });\n  };\n\n  const get = async options => {\n    if (options !== undefined) {\n      setApiOptions({ ...options,\n        ...apiOptions\n      });\n    }\n\n    setIsloading(true);\n    await fetch(apiOptions.serviceUri, {\n      method: 'GET',\n      mode: 'cors'\n    }).then(async res => {\n      if (res.status == 200) {\n        resolve(res);\n      }\n    }).finally(() => {\n      setIsloading(false);\n    });\n  };\n\n  const post = async options => {};\n\n  const unbindData = () => {\n    setItems([]);\n  };\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      await get();\n    };\n\n    if (apiOptions.params == null) {\n      fetchData();\n    }\n  }, []);\n  const result = {\n    items: [],\n    isLoading: false,\n    get,\n    post,\n    unbindData\n  };\n  return result;\n};\n\n_s(useApi, \"/x6zTMuZAw+Wcpqr308Kb2sSFU8=\");\n\nexport default useApi;","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_hooks/useApi.ts"],"names":["React","useApi","options","apiOptions","setApiOptions","useState","items","setItems","isLoading","setIsloading","resolve","res","Promise","json","then","data","responsItems","Array","isArray","JSON","parse","stringify","item","push","get","undefined","fetch","serviceUri","method","mode","status","finally","post","unbindData","useEffect","fetchData","params","result"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAgBA,MAAMC,MAAM,GAAWC,OAAR,IAAqD;AAAA;;AAEhE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAA4BH,OAA5B,CAApC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBP,KAAK,CAACK,QAAN,CAAgC,EAAhC,CAA1B;AACA,QAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BT,KAAK,CAACK,QAAN,CAAwB,KAAxB,CAAlC;;AAGA,QAAMK,OAAO,GAAG,MAAOC,GAAP,IAAwB;AAEpCC,IAAAA,OAAO,CAACF,OAAR,CAAgBC,GAAG,CAACE,IAAJ,EAAhB,EACCC,IADD,CACOC,IAAD,IAAS;AAEX,UAAIC,YAAY,GAAG,EAAnB;;AAEA,UAAGC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAH,EAAuB;AACnBC,QAAAA,YAAY,GAAGG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,IAAf,CAAX,CAAf;AAEAR,QAAAA,QAAQ,CAACS,YAAD,CAAR;AAEA;AACH;;AAED,UAAIM,IAAW,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,IAAf,CAAX,CAAlB;AAEAC,MAAAA,YAAY,CAACO,IAAb,CAAkBD,IAAlB;AAEAf,MAAAA,QAAQ,CAACS,YAAD,CAAR;AACH,KAlBD;AAmBH,GArBD;;AAuBA,QAAMQ,GAAG,GAAG,MAAOtB,OAAP,IAAgC;AAExC,QAAGA,OAAO,KAAKuB,SAAf,EAAyB;AACrBrB,MAAAA,aAAa,CAAC,EAAC,GAAGF,OAAJ;AAAa,WAAGC;AAAhB,OAAD,CAAb;AACH;;AAEDM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMiB,KAAK,CAACvB,UAAU,CAACwB,UAAZ,EAAwB;AAACC,MAAAA,MAAM,EAAE,KAAT;AAAgBC,MAAAA,IAAI,EAAE;AAAtB,KAAxB,CAAL,CACLf,IADK,CACA,MAAOH,GAAP,IAAe;AAEjB,UAAGA,GAAG,CAACmB,MAAJ,IAAc,GAAjB,EAAqB;AAEnBpB,QAAAA,OAAO,CAACC,GAAD,CAAP;AAED;AACJ,KARK,EAQHoB,OARG,CAQK,MAAK;AACZtB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAVK,CAAN;AAYH,GAnBD;;AAqBA,QAAMuB,IAAI,GAAG,MAAO9B,OAAP,IAAiC,CAE7C,CAFD;;AAIA,QAAM+B,UAAU,GAAG,MAAK;AACpB1B,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAFD;;AAIAP,EAAAA,KAAK,CAACkC,SAAN,CAAgB,MAAM;AAElB,UAAMC,SAAS,GAAG,YAAY;AAE1B,YAAMX,GAAG,EAAT;AACH,KAHD;;AAKA,QAAGrB,UAAU,CAACiC,MAAX,IAAqB,IAAxB,EAA6B;AAEzBD,MAAAA,SAAS;AACZ;AAEJ,GAZD,EAYE,EAZF;AAcA,QAAME,MAAyB,GAAG;AAC9B/B,IAAAA,KAAK,EAAE,EADuB;AAE9BE,IAAAA,SAAS,EAAE,KAFmB;AAG9BgB,IAAAA,GAH8B;AAI9BQ,IAAAA,IAJ8B;AAK9BC,IAAAA;AAL8B,GAAlC;AAUA,SAAOI,MAAP;AACH,CApFD;;GAAMpC,M;;AAsFN,eAAeA,MAAf","sourcesContent":["import React from 'react'\r\n\r\nexport interface IApiOptions{\r\n    serviceUri: string\r\n    method?: 'GET'|'POST'\r\n    params?: any | null\r\n}\r\n\r\ninterface IApiResult<TItem>{\r\n    items: TItem[]\r\n    isLoading: boolean\r\n    unbindData: () => void\r\n    get: (options?: IApiOptions) => Promise<void>\r\n    post: (options?: IApiOptions) => Promise<void>\r\n}\r\n\r\nconst useApi = <TItem>(options: IApiOptions) : IApiResult<TItem> => {\r\n\r\n    const [apiOptions, setApiOptions] = React.useState<IApiOptions>(options)\r\n    const [items, setItems] = React.useState<TItem | TItem[]>([])\r\n    const [isLoading, setIsloading] = React.useState<boolean>(false)\r\n   \r\n\r\n    const resolve = async (res: Response) =>{\r\n\r\n        Promise.resolve(res.json())\r\n        .then((data) =>{\r\n\r\n            var responsItems = [] as TItem[]\r\n\r\n            if(Array.isArray(data)){\r\n                responsItems = JSON.parse(JSON.stringify(data))\r\n            \r\n                setItems(responsItems)\r\n\r\n                return\r\n            }\r\n           \r\n            var item: TItem = JSON.parse(JSON.stringify(data))\r\n\r\n            responsItems.push(item)\r\n\r\n            setItems(responsItems)\r\n        });\r\n    }\r\n\r\n    const get = async (options?: IApiOptions) =>{\r\n\r\n        if(options !== undefined){\r\n            setApiOptions({...options, ...apiOptions})\r\n        }\r\n\r\n        setIsloading(true)\r\n        await fetch(apiOptions.serviceUri, {method: 'GET', mode: 'cors'})\r\n        .then(async (res) => {\r\n\r\n            if(res.status == 200){\r\n\r\n              resolve(res);\r\n\r\n            }\r\n        }).finally(() =>{\r\n            setIsloading(false)\r\n        })\r\n        \r\n    }\r\n\r\n    const post = async (options?: IApiOptions) => {\r\n\r\n    }\r\n\r\n    const unbindData = () =>{\r\n        setItems([])\r\n    }\r\n\r\n    React.useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            \r\n            await get();\r\n        }\r\n\r\n        if(apiOptions.params == null){\r\n\r\n            fetchData();\r\n        }\r\n\r\n    },[])\r\n\r\n    const result: IApiResult<TItem> = {\r\n        items: [],\r\n        isLoading: false,\r\n        get,\r\n        post,\r\n        unbindData\r\n        \r\n    }\r\n    \r\n\r\n    return result;\r\n}\r\n\r\nexport default useApi\r\n\r\n"]},"metadata":{},"sourceType":"module"}