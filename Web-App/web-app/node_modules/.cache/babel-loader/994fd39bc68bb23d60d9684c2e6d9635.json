{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_components\\\\_inputs\\\\InputTextField.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InputTextField = props => {\n  _s();\n\n  const {\n    value,\n    type,\n    label,\n    maxRows,\n    multiLine,\n    fullWidth,\n    isReadOnly,\n    hasSelect,\n    selectElements,\n    errorText,\n    onSelect,\n    onValueChange\n  } = props;\n  const [error, setError] = React.useState(\"\");\n  const handleValueChanged = React.useCallback(e => {\n    if (onValueChange !== undefined) onValueChange(e.currentTarget.value);\n  }, [onValueChange]);\n  const onSelectChanged = React.useCallback(e => {\n    if (onSelect !== undefined) {\n      onSelect(parseInt(e.currentTarget.id));\n    }\n  }, [onSelect]);\n  return /*#__PURE__*/_jsxDEV(TextField, {\n    disabled: isReadOnly,\n    fullWidth: fullWidth,\n    multiline: multiLine,\n    maxRows: maxRows,\n    label: label,\n    type: type !== null && type !== void 0 ? type : 'text',\n    value: value,\n    select: hasSelect,\n    error: Boolean(error),\n    helperText: error,\n    onChange: hasSelect === undefined ? handleValueChanged : onSelectChanged,\n    children: hasSelect && (selectElements === null || selectElements === void 0 ? void 0 : selectElements.map(element => {\n      return element;\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InputTextField, \"/2Sk7/PkU1m0q5NOmkQaTt2qD3w=\");\n\n_c = InputTextField;\nexport default InputTextField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputTextField\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_components/_inputs/InputTextField.tsx"],"names":["React","TextField","InputTextField","props","value","type","label","maxRows","multiLine","fullWidth","isReadOnly","hasSelect","selectElements","errorText","onSelect","onValueChange","error","setError","useState","handleValueChanged","useCallback","e","undefined","currentTarget","onSelectChanged","parseInt","id","Boolean","map","element"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;;;AAkBA,MAAMC,cAAgC,GAAIC,KAAD,IAAU;AAAA;;AAE/C,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,SAA9B;AAAyCC,IAAAA,SAAzC;AAAmDC,IAAAA,UAAnD;AAA+DC,IAAAA,SAA/D;AAA0EC,IAAAA,cAA1E;AAA0FC,IAAAA,SAA1F;AAAqGC,IAAAA,QAArG;AAA+GC,IAAAA;AAA/G,MAAgIZ,KAAtI;AAEA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBjB,KAAK,CAACkB,QAAN,CAAuB,EAAvB,CAA1B;AAEA,QAAMC,kBAAkB,GAAGnB,KAAK,CAACoB,WAAN,CAAmBC,CAAD,IAA2C;AAEpF,QAAGN,aAAa,KAAKO,SAArB,EACIP,aAAa,CAACM,CAAC,CAACE,aAAF,CAAgBnB,KAAjB,CAAb;AACP,GAJ0B,EAIzB,CAACW,aAAD,CAJyB,CAA3B;AAMA,QAAMS,eAAe,GAAGxB,KAAK,CAACoB,WAAN,CAAmBC,CAAD,IAA2C;AACjF,QAAGP,QAAQ,KAAKQ,SAAhB,EAA0B;AACtBR,MAAAA,QAAQ,CAACW,QAAQ,CAACJ,CAAC,CAACE,aAAF,CAAgBG,EAAjB,CAAT,CAAR;AACH;AACJ,GAJuB,EAItB,CAACZ,QAAD,CAJsB,CAAxB;AAMA,sBACI,QAAC,SAAD;AACI,IAAA,QAAQ,EAAEJ,UADd;AAEI,IAAA,SAAS,EAAID,SAFjB;AAGI,IAAA,SAAS,EAAED,SAHf;AAII,IAAA,OAAO,EAAED,OAJb;AAKI,IAAA,KAAK,EAAID,KALb;AAMI,IAAA,IAAI,EAAED,IAAF,aAAEA,IAAF,cAAEA,IAAF,GAAS,MANjB;AAOI,IAAA,KAAK,EAAED,KAPX;AAQI,IAAA,MAAM,EAAEO,SARZ;AASI,IAAA,KAAK,EAAIgB,OAAO,CAACX,KAAD,CATpB;AAUI,IAAA,UAAU,EAAEA,KAVhB;AAWI,IAAA,QAAQ,EAAEL,SAAS,KAAKW,SAAd,GAA0BH,kBAA1B,GAA+CK,eAX7D;AAAA,cAYKb,SAAS,KACPC,cADO,aACPA,cADO,uBACPA,cAAc,CAAEgB,GAAhB,CAAqBC,OAAD,IAAY;AAC5B,aAAOA,OAAP;AACH,KAFD,CADO;AAZd;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH,CAtCD;;GAAM3B,c;;KAAAA,c;AAwCN,eAAeA,cAAf","sourcesContent":["import React from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ninterface IProps{\r\n    value: string | number\r\n    type?: string\r\n    label: string\r\n    maxRows?: number\r\n    multiLine?: boolean\r\n    fullWidth?: boolean\r\n    isReadOnly?:boolean\r\n    hasSelect?: boolean\r\n    selectElements?: JSX.Element[]\r\n    hasErrorOption?: boolean\r\n    errorText?: string\r\n    onValueChange?: (value: string) => void\r\n    onSelect?: (value: number) => void\r\n}\r\n\r\nconst InputTextField: React.FC<IProps> = (props) =>{\r\n\r\n    const {value, type, label, maxRows, multiLine, fullWidth,isReadOnly, hasSelect, selectElements, errorText, onSelect, onValueChange} = props\r\n\r\n    const [error, setError] = React.useState<string>(\"\")\r\n\r\n    const handleValueChanged = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) =>{\r\n        \r\n        if(onValueChange !== undefined)\r\n            onValueChange(e.currentTarget.value as string)\r\n    },[onValueChange])\r\n\r\n    const onSelectChanged = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) =>{\r\n        if(onSelect !== undefined){\r\n            onSelect(parseInt(e.currentTarget.id))\r\n        }\r\n    },[onSelect])\r\n    \r\n    return(\r\n        <TextField\r\n            disabled={isReadOnly}\r\n            fullWidth = {fullWidth}\r\n            multiline={multiLine}\r\n            maxRows={maxRows}\r\n            label = {label}\r\n            type={type?? 'text'}\r\n            value={value}\r\n            select={hasSelect}\r\n            error = {Boolean(error)}\r\n            helperText={error}\r\n            onChange={hasSelect === undefined ? handleValueChanged : onSelectChanged}>\r\n            {hasSelect && (\r\n               selectElements?.map((element) =>{\r\n                   return element\r\n               })\r\n            )}\r\n        </TextField>\r\n    )\r\n}\r\n\r\nexport default InputTextField"]},"metadata":{},"sourceType":"module"}