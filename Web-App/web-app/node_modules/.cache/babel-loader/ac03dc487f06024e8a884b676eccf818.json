{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_cookingBook\\\\IngredientList.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, List } from '@material-ui/core';\nimport SubHeaderBar from '../../_components/_appBars/subHeader';\nimport IngrdientListtem from './IngredientListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IngrdientList = props => {\n  _s();\n\n  const {\n    ingredients,\n    isReadOnly,\n    values,\n    unitTypes,\n    onIngredientsChanged\n  } = props;\n  const onIngredientChanged = React.useCallback(ingredient => {\n    const copy = ingredients === null || ingredients === void 0 ? void 0 : ingredients.slice();\n    const index = copy === null || copy === void 0 ? void 0 : copy.findIndex(x => x.id === ingredient.id);\n    copy[index] = ingredient;\n    onIngredientsChanged(copy);\n  }, [ingredients, onIngredientsChanged]);\n  const ingredientList = React.useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(List, {\n      style: {\n        width: '90%',\n        padding: '2vh',\n        marginTop: '1.5vh'\n      },\n      children: (ingredients === null || ingredients === void 0 ? void 0 : ingredients.length) && (ingredients === null || ingredients === void 0 ? void 0 : ingredients.map((ingredient, index) => {\n        return /*#__PURE__*/_jsxDEV(IngrdientListtem, {\n          values: values,\n          ingredient: ingredient,\n          unitTypeItems: unitTypes,\n          isReadOnly: isReadOnly,\n          onIngredientChanged: onIngredientChanged\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 25\n        }, this);\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }, [isReadOnly, ingredients, values, unitTypes, onIngredientChanged]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    style: {\n      marginTop: '2vh'\n    },\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(SubHeaderBar, {\n      title: values.ingrdients,\n      variant: \"h5\",\n      isReadonly: isReadOnly\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), ingredientList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(IngrdientList, \"QIWaT8r7XT0Jnvl2NbthwP5v0S4=\");\n\n_c = IngrdientList;\nexport default IngrdientList;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngrdientList\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_cookingBook/IngredientList.tsx"],"names":["React","Grid","List","SubHeaderBar","IngrdientListtem","IngrdientList","props","ingredients","isReadOnly","values","unitTypes","onIngredientsChanged","onIngredientChanged","useCallback","ingredient","copy","slice","index","findIndex","x","id","ingredientList","useMemo","width","padding","marginTop","length","map","ingrdients"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,EAAcC,IAAd,QAAyB,mBAAzB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AAGA,OAAOC,gBAAP,MAA6B,sBAA7B;;;AAWA,MAAMC,aAA+B,GAAIC,KAAD,IAAW;AAAA;;AAE/C,QAAM;AAACC,IAAAA,WAAD;AAAcC,IAAAA,UAAd;AAA0BC,IAAAA,MAA1B;AAAkCC,IAAAA,SAAlC;AAA6CC,IAAAA;AAA7C,MAAqEL,KAA3E;AAEA,QAAMM,mBAAmB,GAAGZ,KAAK,CAACa,WAAN,CAAmBC,UAAD,IAA4B;AACtE,UAAMC,IAAI,GAAGR,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAES,KAAb,EAAb;AACA,UAAMC,KAAK,GAAGF,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEG,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,UAAU,CAACM,EAAzC,CAAd;AACAL,IAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcH,UAAd;AACAH,IAAAA,oBAAoB,CAACI,IAAD,CAApB;AACH,GAL2B,EAK1B,CAACR,WAAD,EAAcI,oBAAd,CAL0B,CAA5B;AAOA,QAAMU,cAAc,GAAGrB,KAAK,CAACsB,OAAN,CAAc,MAAK;AACtC,wBACI,QAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE,KAAR;AAAeC,QAAAA,OAAO,EAAE,KAAxB;AAA+BC,QAAAA,SAAS,EAAC;AAAzC,OAAb;AAAA,gBACK,CAAAlB,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEmB,MAAb,MAAwBnB,WAAxB,aAAwBA,WAAxB,uBAAwBA,WAAW,CAAEoB,GAAb,CAAiB,CAACb,UAAD,EAAaG,KAAb,KAAuB;AAC7D,4BACI,QAAC,gBAAD;AAEQ,UAAA,MAAM,EAAER,MAFhB;AAGQ,UAAA,UAAU,EAAEK,UAHpB;AAIQ,UAAA,aAAa,EAAEJ,SAJvB;AAKQ,UAAA,UAAU,EAAIF,UALtB;AAMQ,UAAA,mBAAmB,EAAEI;AAN7B,WACaK,KADb;AAAA;AAAA;AAAA;AAAA,gBADJ;AASH,OAVwB,CAAxB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAeH,GAhBsB,EAgBrB,CAACT,UAAD,EAAaD,WAAb,EAA0BE,MAA1B,EAAkCC,SAAlC,EAA6CE,mBAA7C,CAhBqB,CAAvB;AAkBA,sBACI,QAAC,IAAD;AACI,IAAA,KAAK,EAAE;AAACa,MAAAA,SAAS,EAAC;AAAX,KADX;AAEI,IAAA,SAAS,MAFb;AAAA,4BAGI,QAAC,YAAD;AAAc,MAAA,KAAK,EAAEhB,MAAM,CAACmB,UAA5B;AAAwC,MAAA,OAAO,EAAC,IAAhD;AAAqD,MAAA,UAAU,EAAEpB;AAAjE;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKa,cAJL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CArCD;;GAAMhB,a;;KAAAA,a;AAuCN,eAAeA,aAAf","sourcesContent":["import React from 'react'\r\nimport {Grid, List} from '@material-ui/core'\r\nimport SubHeaderBar from '../../_components/_appBars/subHeader'\r\nimport { ICookingBookValues } from '../../_interfaces/ICookingBookValues'\r\nimport { IIngredient } from '../../_interfaces/IMenu'\r\nimport IngrdientListtem from './IngredientListItem'\r\n\r\ninterface IProps{\r\n    ingredients: IIngredient[]\r\n    isReadOnly: boolean\r\n    values: ICookingBookValues\r\n    unitTypes: JSX.Element[]\r\n    onIngredientsChanged: (ingredient: IIngredient[]) => void\r\n}\r\n\r\n\r\nconst IngrdientList: React.FC<IProps> = (props) => {\r\n\r\n    const {ingredients, isReadOnly, values, unitTypes, onIngredientsChanged} = props\r\n\r\n    const onIngredientChanged = React.useCallback((ingredient: IIngredient) =>{\r\n        const copy = ingredients?.slice()\r\n        const index = copy?.findIndex(x => x.id === ingredient.id)\r\n        copy[index] = ingredient\r\n        onIngredientsChanged(copy)\r\n    },[ingredients, onIngredientsChanged])\r\n\r\n    const ingredientList = React.useMemo(() =>{\r\n        return(\r\n            <List style={{width: '90%', padding: '2vh', marginTop:'1.5vh'}}>\r\n                {ingredients?.length &&  ingredients?.map((ingredient, index) => {\r\n                    return(\r\n                        <IngrdientListtem \r\n                                key={index} \r\n                                values={values} \r\n                                ingredient={ingredient} \r\n                                unitTypeItems={unitTypes}\r\n                                isReadOnly = {isReadOnly}\r\n                                onIngredientChanged={onIngredientChanged}/>\r\n                    )\r\n                })}\r\n            </List>\r\n        )\r\n    },[isReadOnly, ingredients, values, unitTypes, onIngredientChanged])\r\n\r\n    return(\r\n        <Grid\r\n            style={{marginTop:'2vh'}}\r\n            container>\r\n            <SubHeaderBar title={values.ingrdients} variant='h5' isReadonly={isReadOnly}/>\r\n            {ingredientList}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default IngrdientList"]},"metadata":{},"sourceType":"module"}