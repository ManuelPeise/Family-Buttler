{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_cookingBook\\\\menuLayout.tsx\",\n    _s = $RefreshSig$();\n\nimport { Container, Grid, makeStyles } from '@material-ui/core';\nimport React from 'react';\nimport MenuFilter from './MenuFilter';\nimport { MenuTypeEnum } from '../../_enums/menuEnums';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = makeStyles(theme => ({\n  filterContext: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  contextContainer: {\n    paddingTop: '1vh',\n    display: 'flex',\n    width: '98vw',\n    // maxHeight:'80vh',\n    padding: '1vw',\n    flexDirection: 'column',\n    overflow: 'scroll'\n  }\n}));\n\nconst MenuLayout = props => {\n  _s();\n\n  const {\n    layoutConfig,\n    menuCollection,\n    selectedMenu,\n    handleSelectMenu\n  } = props;\n  const [filterText, setFilterText] = React.useState(\"\");\n  const [menuType, setMenuType] = React.useState(MenuTypeEnum.None);\n  const useStyle = styles();\n  const onFilterTextChange = React.useCallback(filterText => {\n    setFilterText(filterText);\n  }, [setFilterText]);\n  const onMenuTypeChange = React.useCallback(menuType => {\n    setMenuType(menuType);\n  }, [setMenuType]);\n  const filteredMenuItems = React.useMemo(() => {\n    if (filterText === '' && menuType === MenuTypeEnum.None) {\n      return menuCollection;\n    }\n\n    const menusByFiltertext = menuCollection.filter(item => filterText.length > 0 ? item.name.toLocaleLowerCase().startsWith(filterText.toLocaleLowerCase()) : item);\n\n    if (menuType === MenuTypeEnum.None) {\n      return menusByFiltertext;\n    }\n\n    return menusByFiltertext.filter(item => item.menuType === menuType);\n  }, [menuCollection, filterText, menuType]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Grid // direction='column'\n    // spacing={1}\n    , {\n      item: true,\n      xs: 12,\n      style: {\n        backgroundColor: 'red'\n      },\n      children: /*#__PURE__*/_jsxDEV(MenuFilter, {\n        filterText: filterText,\n        selectedMenuType: menuType,\n        onFilterTextChange: onFilterTextChange,\n        onMenuTypeChange: onMenuTypeChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MenuLayout, \"Zhs+qawnDk5T6x9CFDrL2gRqwwI=\");\n\n_c = MenuLayout;\nexport default MenuLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"MenuLayout\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_cookingBook/menuLayout.tsx"],"names":["Container","Grid","makeStyles","React","MenuFilter","MenuTypeEnum","styles","theme","filterContext","display","justifyContent","contextContainer","paddingTop","width","padding","flexDirection","overflow","MenuLayout","props","layoutConfig","menuCollection","selectedMenu","handleSelectMenu","filterText","setFilterText","useState","menuType","setMenuType","None","useStyle","onFilterTextChange","useCallback","onMenuTypeChange","filteredMenuItems","useMemo","menusByFiltertext","filter","item","length","name","toLocaleLowerCase","startsWith","backgroundColor"],"mappings":"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","sourcesContent":["import { Container, Grid, makeStyles } from '@material-ui/core'\r\nimport React from 'react'\r\nimport { IMenu } from '../../_interfaces/IMenu'\r\nimport { IMenuLayoutConfig } from './interfaces/IMenueLayoutConfig'\r\nimport MenuFilter from './MenuFilter'\r\nimport MenuList from './menuList'\r\nimport {MenuTypeEnum} from '../../_enums/menuEnums'\r\nimport MenuContainer from './MenuContainer'\r\n\r\n\r\ninterface IProps{\r\n   layoutConfig: IMenuLayoutConfig\r\n   selectedMenu: IMenu\r\n   menuCollection: IMenu[]\r\n   handleSelectMenu: (id: number) => void\r\n}\r\n\r\nconst styles = makeStyles((theme) => ({\r\n    filterContext:{\r\n        display:'flex',\r\n        justifyContent:'center'\r\n    },\r\n    contextContainer:{\r\n        paddingTop: '1vh',\r\n        display:'flex',\r\n        width:'98vw',\r\n        // maxHeight:'80vh',\r\n        padding:'1vw',\r\n        flexDirection:'column',\r\n        overflow:'scroll'\r\n    \r\n    }\r\n}))\r\n\r\nconst MenuLayout: React.FC<IProps> = (props) => {\r\n\r\n    const {layoutConfig, menuCollection, selectedMenu, handleSelectMenu} = props\r\n    const [filterText, setFilterText] = React.useState<string>(\"\")\r\n    const [menuType, setMenuType] = React.useState<number>(MenuTypeEnum.None)\r\n    \r\n    const useStyle = styles();\r\n\r\n    const onFilterTextChange = React.useCallback((filterText: string) =>{\r\n        setFilterText(filterText)\r\n    }, [setFilterText])\r\n\r\n    const onMenuTypeChange = React.useCallback((menuType: number) =>{\r\n        setMenuType(menuType)\r\n    }, [setMenuType])\r\n\r\n    const filteredMenuItems = React.useMemo(() =>{\r\n        \r\n        if(filterText === '' && menuType === MenuTypeEnum.None){\r\n            return menuCollection\r\n        }\r\n\r\n        const menusByFiltertext = menuCollection.filter(item => filterText.length > 0 ? item.name.toLocaleLowerCase().startsWith(filterText.toLocaleLowerCase()) : item)\r\n        \r\n        if(menuType === MenuTypeEnum.None){\r\n            return menusByFiltertext\r\n        }\r\n\r\n        return menusByFiltertext.filter(item => item.menuType === menuType)\r\n\r\n    },[menuCollection, filterText, menuType])\r\n\r\n    return(\r\n        <Container>\r\n            <Grid\r\n                // direction='column'\r\n                // spacing={1}\r\n                item\r\n                xs={12}\r\n                style={{ backgroundColor: 'red' }}>\r\n                {/* container */}\r\n                    <MenuFilter \r\n                        filterText={filterText}\r\n                        selectedMenuType={menuType}\r\n                        onFilterTextChange={onFilterTextChange}\r\n                        onMenuTypeChange={onMenuTypeChange}/>\r\n            </Grid> \r\n                    \r\n\r\n                {/* {layoutConfig.hasFilter &&(\r\n                    <Grid\r\n                        item\r\n                        xs={12}\r\n                        sm={12}\r\n                        md={12}\r\n                        lg={12}\r\n                        xl={12}>\r\n                        <MenuFilter \r\n                            filterText={filterText}\r\n                            selectedMenuType={menuType}\r\n                            onFilterTextChange={onFilterTextChange}\r\n                            onMenuTypeChange={onMenuTypeChange}/>\r\n                    </Grid>\r\n                )} */}\r\n                {/* <Grid\r\n                    className={useStyle.contextContainer}\r\n                    container>\r\n                    {layoutConfig.hasMenuList && (\r\n                    <Grid item xs={12} xl = {6}>\r\n                        <MenuList \r\n                            menuCollection={filteredMenuItems} \r\n                            selectedMenuId={layoutConfig.selectedMenuId} \r\n                            handleSelectMenu={handleSelectMenu}/>\r\n                    </Grid>\r\n                    )}\r\n                    <Grid item xs = {12} xl = {6}>\r\n                        <MenuContainer isReadOnly={layoutConfig.isReadOnly} selectedMenu={selectedMenu ?? {} as IMenu}/>\r\n                    </Grid>\r\n                </Grid> */}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MenuLayout"]},"metadata":{},"sourceType":"module"}