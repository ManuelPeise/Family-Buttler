{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_administartion\\\\_logging\\\\loggingPageContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { SetPageTitle } from '../../../_redux/_appStateStore/appStoreAccessor';\nimport LogTable from '../../../_components/_virtualized/_table/Table';\nimport { AutoSizer } from 'react-virtualized';\nimport TableColunm from '../../../_components/_virtualized/_table/TableColunm';\nimport { Grid } from '@material-ui/core';\nimport TableCell from '../../../_components/_virtualized/_table/TableCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoggingPageContainer = props => {\n  _s();\n\n  const {\n    logmessages,\n    selectedItems,\n    handleSelectedItems\n  } = props;\n  const dispatch = useDispatch();\n  dispatch(SetPageTitle(\"Administration - Logging\"));\n  const rowGetter = React.useCallback(row => {\n    return logmessages[row.index];\n  }, [logmessages]);\n  const handleSelect = React.useCallback(id => {\n    const items = selectedItems;\n    items.push(id);\n    handleSelectedItems(items);\n  }, [selectedItems, handleSelectedItems]);\n  const cellRenderer = React.useCallback((cellData, dataKey, index) => {\n    const isSelected = selectedItems.find(x => x === logmessages[index].id) !== -1;\n    return /*#__PURE__*/_jsxDEV(TableCell, {\n      id: logmessages[index].id,\n      value: cellData,\n      checked: isSelected,\n      hasCheckbox: dataKey === 'id',\n      handleSelect: handleSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this);\n  }, [selectedItems, logmessages, handleSelect]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(AutoSizer, {\n      disableHeight: true,\n      children: _ref => {\n        let {\n          width\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(LogTable, {\n          height: 800,\n          width: width,\n          rowHeight: 50,\n          rowCount: logmessages.length,\n          headerHeight: 100,\n          logmessages: logmessages,\n          getRow: rowGetter,\n          children: [TableColunm({\n            key: \"0\",\n            dataKey: 'id',\n            width: 150,\n            headerValue: \"ID\",\n            customCellRenderer: cellRenderer\n          }), TableColunm({\n            key: \"1\",\n            dataKey: 'timeStamp',\n            width: 300,\n            headerValue: \"Date\",\n            customCellRenderer: cellRenderer\n          }), TableColunm({\n            key: \"2\",\n            dataKey: 'messageType',\n            width: 300,\n            headerValue: \"Type\",\n            customCellRenderer: cellRenderer\n          }), TableColunm({\n            key: \"3\",\n            dataKey: 'message',\n            width: 500,\n            headerValue: \"Message\",\n            customCellRenderer: cellRenderer\n          }), TableColunm({\n            key: \"4\",\n            dataKey: 'exception',\n            width: 500,\n            headerValue: \"Exception\",\n            customCellRenderer: cellRenderer\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoggingPageContainer, \"0aNs5ZK+Ep5z/PnJcriJbO0pNqo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = LoggingPageContainer;\nexport default LoggingPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggingPageContainer\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingPageContainer.tsx"],"names":["React","useDispatch","SetPageTitle","LogTable","AutoSizer","TableColunm","Grid","TableCell","LoggingPageContainer","props","logmessages","selectedItems","handleSelectedItems","dispatch","rowGetter","useCallback","row","index","handleSelect","id","items","push","cellRenderer","cellData","dataKey","isSelected","find","x","width","length","key","headerValue","customCellRenderer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { SetPageTitle } from '../../../_redux/_appStateStore/appStoreAccessor';\r\nimport LogTable from '../../../_components/_virtualized/_table/Table';\r\nimport { AutoSizer, Index } from 'react-virtualized';\r\nimport TableColunm from '../../../_components/_virtualized/_table/TableColunm';\r\nimport { Grid } from '@material-ui/core';\r\nimport { ILogmessageRow } from './interfaces/ILogMessageRow';\r\nimport TableCell from '../../../_components/_virtualized/_table/TableCell';\r\n\r\ninterface IProps{\r\n    logmessages: ILogmessageRow[]\r\n    selectedItems: number[]\r\n    handleSelectedItems: (items: number[]) => void\r\n}\r\n\r\nconst LoggingPageContainer: React.FC<IProps> = (props) =>{\r\n\r\n    const {logmessages, selectedItems, handleSelectedItems} = props\r\n    const dispatch = useDispatch();\r\n\r\n    dispatch(SetPageTitle(\"Administration - Logging\"))\r\n  \r\n    const rowGetter = React.useCallback((row: Index) =>{\r\n        return logmessages[row.index]\r\n    },[logmessages])\r\n\r\n    const handleSelect = React.useCallback((id: number) =>{\r\n        const items = selectedItems\r\n        items.push(id)\r\n        handleSelectedItems(items)\r\n    },[selectedItems, handleSelectedItems])\r\n\r\n    const cellRenderer = React.useCallback((cellData: any, dataKey: string, index: number) =>{\r\n        const isSelected = selectedItems.find(x => x === logmessages[index].id) !== -1\r\n        return(\r\n            <TableCell id={logmessages[index].id} value={cellData} checked={isSelected} hasCheckbox={dataKey==='id'} handleSelect={handleSelect} />\r\n        )\r\n    },[selectedItems, logmessages, handleSelect])\r\n\r\n    return(\r\n        <Grid container>\r\n            <AutoSizer disableHeight>\r\n                {({width}) =>(\r\n                <LogTable \r\n                    height={800} \r\n                    width={width} \r\n                    rowHeight={50} \r\n                    rowCount={logmessages.length} \r\n                    headerHeight={100}\r\n                    logmessages={logmessages}\r\n                    getRow={rowGetter}\r\n                    >\r\n                    {TableColunm({key: \"0\", dataKey: 'id', width: 150, headerValue:\"ID\", customCellRenderer: cellRenderer })}\r\n                    {TableColunm({key: \"1\", dataKey: 'timeStamp', width: 300, headerValue: \"Date\", customCellRenderer: cellRenderer})}\r\n                    {TableColunm({key: \"2\", dataKey: 'messageType', width: 300, headerValue: \"Type\", customCellRenderer: cellRenderer})}\r\n                    {TableColunm({key: \"3\", dataKey: 'message', width: 500, headerValue: \"Message\", customCellRenderer: cellRenderer})}\r\n                    {TableColunm({key: \"4\", dataKey: 'exception', width: 500, headerValue: \"Exception\", customCellRenderer: cellRenderer})}\r\n                </LogTable>\r\n            )}\r\n            </AutoSizer>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default LoggingPageContainer"]},"metadata":{},"sourceType":"module"}