{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_administartion\\\\_logging\\\\loggingPageContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport LogTable from '../../../_components/_virtualized/_table/Table';\nimport { AutoSizer } from 'react-virtualized';\nimport TableColunm from '../../../_components/_virtualized/_table/TableColunm';\nimport { Button, Grid } from '@material-ui/core';\nimport TableCell from '../../../_components/_virtualized/_table/TableCell';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SetPageTitle } from '../../../_redux/_appStateStore/appStoreAccessor';\nimport { getLogMessageRow } from '../mapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoggingPageContainer = props => {\n  _s();\n\n  const {\n    selectedItems,\n    handleSelectedItems,\n    handleSelectAll,\n    onCancel,\n    deleteLogmessages\n  } = props;\n  const dispatch = useDispatch();\n  const messages = useSelector(state => state.logMessages);\n  dispatch(SetPageTitle(\"Administration - Logging\"));\n  const logMessageRows = React.useMemo(() => {\n    return messages.map(item => {\n      return getLogMessageRow(item);\n    });\n  }, [messages]);\n  const rowGetter = React.useCallback(row => {\n    return logMessageRows[row.index];\n  }, [logMessageRows]);\n  const cellRenderer = React.useCallback((cellData, dataKey, index) => {\n    return /*#__PURE__*/_jsxDEV(TableCell, {\n      id: logMessageRows[index].id,\n      value: cellData,\n      selectedItems: selectedItems.ids,\n      hasCheckbox: dataKey === 'id',\n      handleSelectedItems: handleSelectedItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }, [selectedItems, logMessageRows, handleSelectedItems]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(AutoSizer, {\n        children: _ref => {\n          let {\n            width,\n            height\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(LogTable, {\n            height: 600,\n            width: width,\n            rowHeight: 50,\n            rowCount: logMessageRows.length,\n            headerHeight: 100,\n            logmessages: logMessageRows,\n            getRow: rowGetter,\n            children: [TableColunm({\n              key: \"0\",\n              dataKey: 'id',\n              width: 150,\n              headerValue: \"ID\",\n              state: selectedItems,\n              itemCount: logMessageRows.length,\n              customCellRenderer: cellRenderer,\n              handleSelectAll: handleSelectAll\n            }), TableColunm({\n              key: \"1\",\n              dataKey: 'timeStamp',\n              width: 300,\n              headerValue: \"Date\",\n              state: selectedItems,\n              itemCount: logMessageRows.length,\n              customCellRenderer: cellRenderer,\n              handleSelectAll: handleSelectAll\n            }), TableColunm({\n              key: \"2\",\n              dataKey: 'messageType',\n              width: 300,\n              headerValue: \"Type\",\n              state: selectedItems,\n              itemCount: logMessageRows.length,\n              customCellRenderer: cellRenderer,\n              handleSelectAll: handleSelectAll\n            }), TableColunm({\n              key: \"3\",\n              dataKey: 'message',\n              width: 500,\n              headerValue: \"Message\",\n              state: selectedItems,\n              itemCount: logMessageRows.length,\n              customCellRenderer: cellRenderer,\n              handleSelectAll: handleSelectAll\n            }), TableColunm({\n              key: \"4\",\n              dataKey: 'exception',\n              width: 500,\n              headerValue: \"Details\",\n              state: selectedItems,\n              itemCount: logMessageRows.length,\n              customCellRenderer: cellRenderer,\n              handleSelectAll: handleSelectAll\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), (logMessageRows === null || logMessageRows === void 0 ? void 0 : logMessageRows.length) > 0 && /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      style: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingRight: '2rem'\n      },\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        disabled: selectedItems.ids.length === 0,\n        onClick: onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: selectedItems.ids.length === 0,\n        onClick: deleteLogmessages,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoggingPageContainer, \"jmkR1s1eQlu96mtLFh86yYbLEFo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = LoggingPageContainer;\nexport default LoggingPageContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggingPageContainer\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingPageContainer.tsx"],"names":["React","LogTable","AutoSizer","TableColunm","Button","Grid","TableCell","useDispatch","useSelector","SetPageTitle","getLogMessageRow","LoggingPageContainer","props","selectedItems","handleSelectedItems","handleSelectAll","onCancel","deleteLogmessages","dispatch","messages","state","logMessages","logMessageRows","useMemo","map","item","rowGetter","useCallback","row","index","cellRenderer","cellData","dataKey","id","ids","width","height","length","key","headerValue","itemCount","customCellRenderer","display","justifyContent","paddingRight"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport LogTable from '../../../_components/_virtualized/_table/Table';\r\nimport { AutoSizer, Index } from 'react-virtualized';\r\nimport TableColunm from '../../../_components/_virtualized/_table/TableColunm';\r\nimport { Button, Grid } from '@material-ui/core';\r\nimport TableCell from '../../../_components/_virtualized/_table/TableCell';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { SetPageTitle } from '../../../_redux/_appStateStore/appStoreAccessor';\r\nimport { ILogMessageTableState } from './loggingDataService';\r\nimport { IAppState } from '../../../_interfaces/IAppState';\r\nimport { ILogmessage } from './interfaces/ILogmessage';\r\nimport { getLogMessageRow } from '../mapper';\r\n\r\ninterface IProps{\r\n    selectedItems: ILogMessageTableState\r\n    handleSelectedItems: (items: number[]) => void\r\n    handleSelectAll: () => void\r\n    deleteLogmessages: () => Promise<void>\r\n    onCancel: () => void\r\n}\r\n\r\nconst LoggingPageContainer: React.FC<IProps> = (props) =>{\r\n\r\n    const {selectedItems, handleSelectedItems, handleSelectAll, onCancel, deleteLogmessages} = props\r\n\r\n    const dispatch = useDispatch();\r\n    const messages = useSelector<IAppState, ILogmessage[]>(state => state.logMessages)\r\n\r\n    dispatch(SetPageTitle(\"Administration - Logging\"))\r\n    \r\n    const logMessageRows = React.useMemo(() =>{\r\n        return messages.map((item) =>{\r\n            return getLogMessageRow(item)\r\n        })\r\n    },[messages])\r\n\r\n    const rowGetter = React.useCallback((row: Index) =>{\r\n        return logMessageRows[row.index]\r\n    },[logMessageRows])\r\n\r\n    const cellRenderer = React.useCallback((cellData: any, dataKey: string, index: number) =>{\r\n        return(\r\n            <TableCell id={logMessageRows[index].id} value={cellData} selectedItems={selectedItems.ids} hasCheckbox={dataKey==='id'} handleSelectedItems={handleSelectedItems} />\r\n        )\r\n    },[selectedItems, logMessageRows, handleSelectedItems])\r\n\r\n    return(\r\n        <Grid container>\r\n            <Grid\r\n                item\r\n                xs={12}>\r\n                <AutoSizer>\r\n                    {({width, height}) =>(\r\n                    <LogTable \r\n                        height={600} \r\n                        width={width} \r\n                        rowHeight={50} \r\n                        rowCount={logMessageRows.length} \r\n                        headerHeight={100}\r\n                        logmessages={logMessageRows}\r\n                        getRow={rowGetter}\r\n                        >\r\n                        {TableColunm({key: \"0\", dataKey: 'id', width: 150, headerValue:\"ID\", state: selectedItems, itemCount: logMessageRows.length,  customCellRenderer: cellRenderer, handleSelectAll: handleSelectAll })}\r\n                        {TableColunm({key: \"1\", dataKey: 'timeStamp', width: 300, headerValue: \"Date\", state: selectedItems, itemCount: logMessageRows.length, customCellRenderer: cellRenderer, handleSelectAll: handleSelectAll})}\r\n                        {TableColunm({key: \"2\", dataKey: 'messageType', width: 300, headerValue: \"Type\", state: selectedItems, itemCount: logMessageRows.length, customCellRenderer: cellRenderer, handleSelectAll: handleSelectAll})}\r\n                        {TableColunm({key: \"3\", dataKey: 'message', width: 500, headerValue: \"Message\", state: selectedItems, itemCount: logMessageRows.length,customCellRenderer: cellRenderer, handleSelectAll: handleSelectAll})}\r\n                        {TableColunm({key: \"4\", dataKey: 'exception', width: 500, headerValue: \"Details\", state: selectedItems, itemCount: logMessageRows.length, customCellRenderer: cellRenderer, handleSelectAll: handleSelectAll})}\r\n                    </LogTable>\r\n                )}\r\n                </AutoSizer>\r\n            </Grid>\r\n            {logMessageRows?.length > 0 &&(\r\n            <Grid\r\n                item\r\n                style={{display:'flex', justifyContent:'flex-end', paddingRight:'2rem'}}\r\n                xs={12}>\r\n                <Button disabled={selectedItems.ids.length === 0} onClick={onCancel}>Cancel</Button>\r\n                <Button disabled={selectedItems.ids.length === 0} onClick={deleteLogmessages}>Save</Button>\r\n            </Grid>\r\n            )}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default LoggingPageContainer"]},"metadata":{},"sourceType":"module"}