{"ast":null,"code":"import _asyncToGenerator from\"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";import _slicedToArray from\"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import _regeneratorRuntime from\"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React from'react';import useApi from'../../../_hooks/useApi';import LoggingPageContainer from'./loggingPageContainer';import apiConfig from'../../../_config/apiConfig.json';import{useDispatch}from'react-redux';import{SetLogMessages}from'../../../_redux/_appStateStore/appStoreAccessor';import{jsx as _jsx}from\"react/jsx-runtime\";var LoggingDataservice=function LoggingDataservice(props){var dispatch=useDispatch();var logDataService=useApi({serviceUri:apiConfig.baseUrl+apiConfig.administration.getLogmessages,params:null});var _React$useState=React.useState({allSelected:false,ids:[]}),_React$useState2=_slicedToArray(_React$useState,2),selectedItems=_React$useState2[0],setSelectedItems=_React$useState2[1];// const logMessageRows = React.useMemo(() =>{\n//     return logDataService.items.map((item) =>{\n//         return getLogMessageRow(item)\n//     })\n// },[logDataService])\nvar handleSelectedItemsChanged=React.useCallback(function(items){setSelectedItems({allSelected:logDataService.items.length===items.length&&items!==[],ids:items});},[logDataService.items]);var handleSelectAll=React.useCallback(function(){var _selectedItems$ids;if(selectedItems!==null&&selectedItems!==void 0&&(_selectedItems$ids=selectedItems.ids)!==null&&_selectedItems$ids!==void 0&&_selectedItems$ids.length){setSelectedItems({allSelected:false,ids:[]});return;}var items=logDataService.items.map(function(msg){return msg.id;});setSelectedItems({allSelected:items.length===logDataService.items.length,ids:items});},[logDataService.items,selectedItems.ids.length]);var getMessagesToDelete=React.useCallback(function(){var messages=[];logDataService.items.forEach(function(msg){var index=selectedItems.ids.findIndex(function(x){return x===msg.id;});if(index!==-1){messages.push(msg);}});return messages;},[logDataService.items,selectedItems.ids]);var deleteLogmessages=React.useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var messages;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return logDataService.post({serviceUri:apiConfig.baseUrl+apiConfig.administration.deleteLogmessages,params:selectedItems.ids});case 2:messages=getMessagesToDelete();dispatch(SetLogMessages(messages));case 4:case\"end\":return _context.stop();}}},_callee);})),[logDataService,selectedItems.ids,getMessagesToDelete,dispatch]);var onCancel=React.useCallback(function(){setSelectedItems({allSelected:false,ids:[]});},[]);if(logDataService.items===undefined){return null;}dispatch(SetLogMessages(logDataService.items));return/*#__PURE__*/_jsx(LoggingPageContainer,{selectedItems:selectedItems,handleSelectedItems:handleSelectedItemsChanged,handleSelectAll:handleSelectAll,deleteLogmessages:deleteLogmessages,onCancel:onCancel});};export default LoggingDataservice;","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingDataService.tsx"],"names":["React","useApi","LoggingPageContainer","apiConfig","useDispatch","SetLogMessages","LoggingDataservice","props","dispatch","logDataService","serviceUri","baseUrl","administration","getLogmessages","params","useState","allSelected","ids","selectedItems","setSelectedItems","handleSelectedItemsChanged","useCallback","items","length","handleSelectAll","map","msg","id","getMessagesToDelete","messages","forEach","index","findIndex","x","push","deleteLogmessages","post","onCancel","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport useApi from '../../../_hooks/useApi'\r\nimport { ILogmessage } from './interfaces/ILogmessage'\r\nimport LoggingPageContainer from './loggingPageContainer'\r\nimport apiConfig from '../../../_config/apiConfig.json'\r\nimport { useDispatch } from 'react-redux'\r\nimport { SetLogMessages } from '../../../_redux/_appStateStore/appStoreAccessor'\r\n\r\nexport interface ILogMessageTableState{\r\n    allSelected: boolean\r\n    ids: number[] \r\n}\r\ninterface IProps{\r\n\r\n}\r\n\r\nconst LoggingDataservice: React.FC<IProps> = (props) =>{\r\n   \r\n    const dispatch = useDispatch();\r\n\r\n    const logDataService = useApi<ILogmessage>({\r\n        serviceUri: apiConfig.baseUrl + apiConfig.administration.getLogmessages,\r\n        params: null\r\n    })\r\n\r\n    const [selectedItems, setSelectedItems] = React.useState<ILogMessageTableState>({allSelected: false, ids:[]})\r\n\r\n    // const logMessageRows = React.useMemo(() =>{\r\n    //     return logDataService.items.map((item) =>{\r\n    //         return getLogMessageRow(item)\r\n    //     })\r\n    // },[logDataService])\r\n\r\n    const handleSelectedItemsChanged = React.useCallback((items: number[]) =>{\r\n        setSelectedItems({allSelected: logDataService.items.length === items.length && items !== [], ids: items})\r\n    },[logDataService.items])\r\n\r\n    const handleSelectAll = React.useCallback(() => {\r\n        if(selectedItems?.ids?.length){\r\n            setSelectedItems({allSelected: false, ids:[]})\r\n\r\n            return\r\n        }\r\n        const items = logDataService.items.map((msg) =>{\r\n                return msg.id\r\n        })\r\n        \r\n        setSelectedItems({allSelected: items.length === logDataService.items.length, ids: items})\r\n    },[logDataService.items, selectedItems.ids.length])\r\n   \r\n    const getMessagesToDelete = React.useCallback(() =>{\r\n        const messages = [] as ILogmessage[]\r\n\r\n        logDataService.items.forEach(msg => {\r\n            \r\n            const index = selectedItems.ids.findIndex(x => x === msg.id)\r\n\r\n            if(index !== -1){\r\n                messages.push(msg)\r\n            }\r\n        })\r\n\r\n        return messages\r\n    },[logDataService.items, selectedItems.ids])\r\n\r\n    const deleteLogmessages = React.useCallback(async () =>{\r\n        await logDataService.post({\r\n            serviceUri:apiConfig.baseUrl + apiConfig.administration.deleteLogmessages,\r\n            params: selectedItems.ids\r\n        })\r\n\r\n        const messages = getMessagesToDelete()\r\n\r\n        dispatch(SetLogMessages(messages))\r\n        \r\n\r\n    },[logDataService, selectedItems.ids, getMessagesToDelete, dispatch])\r\n\r\n    const onCancel = React.useCallback(() =>{\r\n        setSelectedItems({allSelected:false, ids:[]})\r\n    },[])\r\n\r\n    if(logDataService.items === undefined){\r\n        return null\r\n    }\r\n    \r\n    dispatch(SetLogMessages(logDataService.items))\r\n\r\n    return(\r\n        <LoggingPageContainer\r\n            selectedItems={selectedItems}\r\n            handleSelectedItems={handleSelectedItemsChanged}\r\n            handleSelectAll={handleSelectAll}\r\n            deleteLogmessages={deleteLogmessages}\r\n            onCancel={onCancel}\r\n            />\r\n    )\r\n}\r\n\r\nexport default LoggingDataservice\r\n"]},"metadata":{},"sourceType":"module"}