{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport apiConfig from '../_config/apiConfig.json';\nexport const useImageUpload = src => {\n  _s();\n\n  const [image, setImage] = React.useState(src);\n  const [file, setFile] = React.useState(null);\n\n  const callBack = buffer => {\n    setImage(buffer);\n  };\n\n  const fetchData = async form => {\n    await fetch(apiConfig.baseUrl + apiConfig.cookingBook.image, {\n      method: 'POST',\n      mode: 'cors',\n      body: JSON.stringify(form),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n  };\n\n  const getBase64 = React.useCallback(file => {\n    let reader = new FileReader();\n\n    reader.onload = async () => {\n      const result = reader.result;\n      const array = new Uint32Array(result); //    var binary = String.fromCharCode.apply(null, array)\n\n      console.log(array); // callBack(reader.result as ArrayBuffer)\n    };\n\n    reader.onerror = function (error) {\n      console.log('Error: ', error);\n    };\n\n    reader.readAsArrayBuffer(file);\n  }, []);\n  return {\n    buffer: image,\n    file: file,\n    getBase64\n  };\n};\n\n_s(useImageUpload, \"zueJYsJJzU8Gooslzw7LDoLos54=\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_hooks/useImageUpload.ts"],"names":["React","apiConfig","useImageUpload","src","image","setImage","useState","file","setFile","callBack","buffer","fetchData","form","fetch","baseUrl","cookingBook","method","mode","body","JSON","stringify","headers","getBase64","useCallback","reader","FileReader","onload","result","array","Uint32Array","console","log","onerror","error","readAsArrayBuffer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;AAQA,OAAO,MAAMC,cAAc,GAAIC,GAAD,IAAkD;AAAA;;AAE5E,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,KAAK,CAACM,QAAN,CAAmCH,GAAnC,CAA1B;AACA,QAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBR,KAAK,CAACM,QAAN,CAA8B,IAA9B,CAAxB;;AAEA,QAAMG,QAAQ,GAAIC,MAAD,IAAwB;AACrCL,IAAAA,QAAQ,CAACK,MAAD,CAAR;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAG,MAAOC,IAAP,IAAyB;AACvC,UAAMC,KAAK,CAACZ,SAAS,CAACa,OAAV,GAAoBb,SAAS,CAACc,WAAV,CAAsBX,KAA3C,EAAkD;AAACY,MAAAA,MAAM,EAAE,MAAT;AAAiBC,MAAAA,IAAI,EAAE,MAAvB;AAA+BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CAArC;AAA2DS,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB;AAApE,KAAlD,CAAX;AACH,GAFD;;AAIA,QAAMC,SAAS,GAAGtB,KAAK,CAACuB,WAAN,CAAmBhB,IAAD,IAAgB;AAChD,QAAIiB,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AAEAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,YAAa;AAEzB,YAAMC,MAAM,GAAGH,MAAM,CAACG,MAAtB;AAEA,YAAMC,KAAK,GAAG,IAAIC,WAAJ,CAAgBF,MAAhB,CAAd,CAJyB,CAK5B;;AAEGG,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAPyB,CAQzB;AACH,KATD;;AAUAJ,IAAAA,MAAM,CAACQ,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAC9BH,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBE,KAAvB;AACH,KAFD;;AAIAT,IAAAA,MAAM,CAACU,iBAAP,CAAyB3B,IAAzB;AACH,GAlBiB,EAkBhB,EAlBgB,CAAlB;AAoBA,SAAO;AACHG,IAAAA,MAAM,EAAEN,KADL;AAEHG,IAAAA,IAAI,EAAEA,IAFH;AAGHe,IAAAA;AAHG,GAAP;AAKH,CAtCM;;GAAMpB,c","sourcesContent":["import React from \"react\";\r\nimport apiConfig from '../_config/apiConfig.json'\r\n\r\nexport interface IImageUploadResult{\r\n    buffer: string | ArrayBuffer | null\r\n    file: FormData|null\r\n    getBase64: (file: File) => void\r\n}\r\n\r\nexport const useImageUpload = (src: ArrayBuffer | string): IImageUploadResult =>{\r\n\r\n    const [image, setImage] = React.useState<ArrayBuffer|string>(src);    \r\n    const [file, setFile] = React.useState<FormData|null>(null)\r\n\r\n    const callBack = (buffer: ArrayBuffer) =>{\r\n        setImage(buffer)\r\n    }\r\n\r\n    const fetchData = async (form: FormData) =>{\r\n        await fetch(apiConfig.baseUrl + apiConfig.cookingBook.image, {method: 'POST', mode: 'cors', body: JSON.stringify(form), headers: {\"Content-Type\":\"application/json\"}})\r\n    }\r\n\r\n    const getBase64 = React.useCallback((file: File) => {\r\n        let reader = new FileReader();\r\n        \r\n        reader.onload = async  () => {\r\n\r\n            const result = reader.result as ArrayBuffer\r\n            \r\n            const array = new Uint32Array(result)\r\n         //    var binary = String.fromCharCode.apply(null, array)\r\n\r\n            console.log(array)\r\n            // callBack(reader.result as ArrayBuffer)\r\n        };\r\n        reader.onerror = function (error) {\r\n            console.log('Error: ', error);\r\n        };\r\n\r\n        reader.readAsArrayBuffer(file)\r\n    },[])\r\n\r\n    return {\r\n        buffer: image,\r\n        file: file,\r\n        getBase64\r\n    }\r\n} "]},"metadata":{},"sourceType":"module"}