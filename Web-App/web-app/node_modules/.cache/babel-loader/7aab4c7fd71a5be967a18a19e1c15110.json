{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_cookingBook\\\\EditMenuDataService.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useApi from '../../_hooks/useApi';\nimport apiConfig from '../../_config/apiConfig.json';\nimport { SetMenu, SetMenuCollection, SetPageTitle } from '../../_redux/_appStateStore/appStoreAccessor';\nimport { useDispatch } from 'react-redux';\nimport MenuLayout from './MenuLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditMenuDataService = () => {\n  _s();\n\n  var _menuDataService$item9;\n\n  const dispatch = useDispatch();\n  const [selectedMenuId, setSelectedMenuId] = React.useState(0);\n  const menuDataService = useApi({\n    serviceUri: apiConfig.baseUrl + apiConfig.cookingBook.getMenuCollection,\n    params: null\n  });\n  const valueDataService = useApi({\n    serviceUri: apiConfig.baseUrl + apiConfig.i18nController + \"cookingbook_cookingbookEn\",\n    params: null\n  });\n  const handleMenuSelect = React.useCallback(id => {\n    var _menuDataService$item, _menuDataService$item2, _menuDataService$item3;\n\n    if (id !== null) setSelectedMenuId(id);\n    dispatch(SetMenu((_menuDataService$item = (_menuDataService$item2 = menuDataService.items[0]) === null || _menuDataService$item2 === void 0 ? void 0 : (_menuDataService$item3 = _menuDataService$item2.menuCollection) === null || _menuDataService$item3 === void 0 ? void 0 : _menuDataService$item3.find(menu => menu.id === selectedMenuId)) !== null && _menuDataService$item !== void 0 ? _menuDataService$item : {}));\n  }, [setSelectedMenuId]);\n  const selectedMenu = React.useMemo(() => {\n    var _menuDataService$item4, _menuDataService$item5, _menuDataService$item6;\n\n    return (_menuDataService$item4 = (_menuDataService$item5 = menuDataService.items[0]) === null || _menuDataService$item5 === void 0 ? void 0 : (_menuDataService$item6 = _menuDataService$item5.menuCollection) === null || _menuDataService$item6 === void 0 ? void 0 : _menuDataService$item6.find(menu => menu.id === selectedMenuId)) !== null && _menuDataService$item4 !== void 0 ? _menuDataService$item4 : {};\n  }, [selectedMenuId, menuDataService]);\n  const saveOrUpdateRecipe = React.useCallback(async menu => {\n    await menuDataService.post({\n      serviceUri: apiConfig.baseUrl + apiConfig.cookingBook.addOrUpdateRecipe,\n      method: 'POST',\n      params: menu\n    }).then(() => {\n      setSelectedMenuId(0);\n    });\n  }, []);\n  const component = React.useMemo(() => {\n    var _menuDataService$item7, _menuDataService$item8;\n\n    const config = {\n      isReadOnly: false,\n      hasFilter: true,\n      hasMenuList: true,\n      selectedMenuId: selectedMenuId,\n      componentKey: 'edit'\n    };\n    return /*#__PURE__*/_jsxDEV(MenuLayout, {\n      layoutConfig: config,\n      menuCollection: (_menuDataService$item7 = (_menuDataService$item8 = menuDataService.items[0]) === null || _menuDataService$item8 === void 0 ? void 0 : _menuDataService$item8.menuCollection) !== null && _menuDataService$item7 !== void 0 ? _menuDataService$item7 : [],\n      values: valueDataService.items[0],\n      handleSelectMenu: handleMenuSelect,\n      handleSave: saveOrUpdateRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 16\n    }, this);\n  }, [menuDataService.items, valueDataService.items, selectedMenuId, selectedMenu, handleMenuSelect, saveOrUpdateRecipe]);\n\n  if (menuDataService.items[0] === null) {\n    return null;\n  }\n\n  if (valueDataService.items[0] === null || valueDataService.items[0] === undefined) {\n    return null;\n  }\n\n  dispatch(SetMenuCollection((_menuDataService$item9 = menuDataService.items[0]) === null || _menuDataService$item9 === void 0 ? void 0 : _menuDataService$item9.menuCollection));\n  dispatch(SetPageTitle(valueDataService.items[0].pageTitleEdit));\n  return component;\n};\n\n_s(EditMenuDataService, \"KG+N6akXjDHPmTZS4lLPfG7k8Nk=\", false, function () {\n  return [useDispatch, useApi, useApi];\n});\n\n_c = EditMenuDataService;\nexport default EditMenuDataService;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMenuDataService\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_cookingBook/EditMenuDataService.tsx"],"names":["React","useApi","apiConfig","SetMenu","SetMenuCollection","SetPageTitle","useDispatch","MenuLayout","EditMenuDataService","dispatch","selectedMenuId","setSelectedMenuId","useState","menuDataService","serviceUri","baseUrl","cookingBook","getMenuCollection","params","valueDataService","i18nController","handleMenuSelect","useCallback","id","items","menuCollection","find","menu","selectedMenu","useMemo","saveOrUpdateRecipe","post","addOrUpdateRecipe","method","then","component","config","isReadOnly","hasFilter","hasMenuList","componentKey","undefined","pageTitleEdit"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport useApi from '../../_hooks/useApi'\r\nimport { IMenu, IMenuResponse } from '../../_interfaces/IMenu'\r\nimport apiConfig from '../../_config/apiConfig.json'\r\nimport { SetMenu, SetMenuCollection, SetPageTitle } from '../../_redux/_appStateStore/appStoreAccessor'\r\nimport { useDispatch } from 'react-redux'\r\nimport MenuLayout from './MenuLayout'\r\nimport { IMenuLayoutConfig } from './interfaces/IMenueLayoutConfig'\r\nimport { ICookingBookValues } from '../../_interfaces/ICookingBookValues'\r\nimport { useImageConverter } from '../../_hooks/useImageConverter'\r\n\r\nconst EditMenuDataService: React.FC= () =>{\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const [selectedMenuId, setSelectedMenuId] = React.useState<number>(0)\r\n\r\n    const menuDataService = useApi<IMenuResponse>({serviceUri: apiConfig.baseUrl + apiConfig.cookingBook.getMenuCollection, params: null})\r\n    \r\n    const valueDataService = useApi<ICookingBookValues>({serviceUri: apiConfig.baseUrl + apiConfig.i18nController + \"cookingbook_cookingbookEn\", params: null}) \r\n    \r\n    const handleMenuSelect = React.useCallback((id: number | null) =>{\r\n        if(id !== null)\r\n        setSelectedMenuId(id)\r\n        dispatch(SetMenu(menuDataService.items[0]?.menuCollection?.find(menu => menu.id === selectedMenuId) ?? {} as IMenu))\r\n    },[setSelectedMenuId])\r\n\r\n    const selectedMenu = React.useMemo(() =>{\r\n        return menuDataService.items[0]?.menuCollection?.find(menu => menu.id === selectedMenuId) ?? {} as IMenu\r\n    },[selectedMenuId, menuDataService])\r\n    \r\n    const saveOrUpdateRecipe = React.useCallback(async (menu: IMenu) =>{\r\n        await menuDataService.post({serviceUri: apiConfig.baseUrl + apiConfig.cookingBook.addOrUpdateRecipe, method: 'POST', params: menu})\r\n        .then(() =>{\r\n            setSelectedMenuId(0)\r\n        })\r\n    },[])\r\n\r\n    const component = React.useMemo(() =>{\r\n       \r\n        const config: IMenuLayoutConfig = {\r\n            isReadOnly: false, \r\n            hasFilter: true, \r\n            hasMenuList: true,\r\n            selectedMenuId: selectedMenuId,\r\n            componentKey: 'edit'\r\n            }\r\n                \r\n        return <MenuLayout \r\n                    layoutConfig={config} \r\n                    menuCollection={menuDataService.items[0]?.menuCollection?? []}\r\n                    values={valueDataService.items[0]}\r\n                    handleSelectMenu={handleMenuSelect} \r\n                    handleSave={saveOrUpdateRecipe}/>\r\n         \r\n    },[menuDataService.items, valueDataService.items, selectedMenuId, selectedMenu, handleMenuSelect, saveOrUpdateRecipe])\r\n\r\n    if(menuDataService.items[0] === null){\r\n\r\n        return null\r\n    }\r\n\r\n    if(valueDataService.items[0] === null || valueDataService.items[0] === undefined){\r\n        return null\r\n    }\r\n\r\n    dispatch(SetMenuCollection(menuDataService.items[0]?.menuCollection))\r\n    dispatch(SetPageTitle(valueDataService.items[0].pageTitleEdit))\r\n    return component\r\n}\r\n\r\nexport default EditMenuDataService\r\n"]},"metadata":{},"sourceType":"module"}