{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_components\\\\_inputs\\\\ImageInput.tsx\",\n    _s = $RefreshSig$();\n\nimport { Grid, TextField } from '@material-ui/core';\nimport React from 'react';\nimport { useImageUpload } from '../../_hooks/useImageUpload';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ImageInput = props => {\n  _s();\n\n  var _imageService$buffer;\n\n  const {\n    isReadOnly,\n    width,\n    height,\n    src\n  } = props;\n  const imageService = useImageUpload(src !== null && src !== void 0 ? src : \"\");\n  const handleChange = React.useCallback(async e => {\n    if (e.target.files !== null && e.target.files[0]) {\n      const file = e.target.files[0];\n      console.log(file);\n      imageService.getBase64(file);\n    }\n  }, [imageService]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      width: width,\n      height: height,\n      src: (_imageService$buffer = imageService.buffer) === null || _imageService$buffer === void 0 ? void 0 : _imageService$buffer.toString()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), !isReadOnly && /*#__PURE__*/_jsxDEV(TextField, {\n      hidden: true,\n      type: \"file\",\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ImageInput, \"C3khk2lgqNFpLt6kmNx0a6elWGY=\", false, function () {\n  return [useImageUpload];\n});\n\n_c = ImageInput;\nexport default ImageInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImageInput\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_components/_inputs/ImageInput.tsx"],"names":["Grid","TextField","React","useImageUpload","ImageInput","props","isReadOnly","width","height","src","imageService","handleChange","useCallback","e","target","files","file","console","log","getBase64","buffer","toString"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,SAAf,QAAgC,mBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,QAA6B,6BAA7B;;;AASA,MAAMC,UAA4B,GAAIC,KAAD,IAAU;AAAA;;AAAA;;AAE3C,QAAM;AAACC,IAAAA,UAAD;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA;AAA5B,MAAmCJ,KAAzC;AAEA,QAAMK,YAAY,GAAGP,cAAc,CAACM,GAAD,aAACA,GAAD,cAACA,GAAD,GAAO,EAAP,CAAnC;AAEA,QAAME,YAAY,GAAGT,KAAK,CAACU,WAAN,CAAkB,MAAOC,CAAP,IAAiD;AAEpF,QAAGA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,IAAnB,IAA2BF,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAA9B,EAAgD;AAE5C,YAAMC,IAAI,GAAGH,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAN,MAAAA,YAAY,CAACS,SAAb,CAAuBH,IAAvB;AACH;AACJ,GARoB,EAQnB,CAACN,YAAD,CARmB,CAArB;AAUA,sBACI,QAAC,IAAD;AACI,IAAA,IAAI,MADR;AAAA,4BAEI;AAAK,MAAA,KAAK,EAAEH,KAAZ;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAmC,MAAA,GAAG,0BAAEE,YAAY,CAACU,MAAf,yDAAE,qBAAqBC,QAArB;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGK,CAACf,UAAD,iBACG,QAAC,SAAD;AAAW,MAAA,MAAM,MAAjB;AAAkB,MAAA,IAAI,EAAC,MAAvB;AAA8B,MAAA,QAAQ,EAAEK;AAAxC;AAAA;AAAA;AAAA;AAAA,YAJR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAzBD;;GAAMP,U;UAImBD,c;;;KAJnBC,U;AA2BN,eAAeA,UAAf","sourcesContent":["import { Grid, TextField } from '@material-ui/core'\r\nimport React from 'react'\r\nimport {useImageUpload} from '../../_hooks/useImageUpload'\r\n\r\ninterface IProps{\r\n    isReadOnly: boolean\r\n    width: number\r\n    height: number\r\n    src?: string\r\n}\r\n\r\nconst ImageInput: React.FC<IProps> = (props) =>{\r\n\r\n    const {isReadOnly, width, height, src} = props\r\n\r\n    const imageService = useImageUpload(src?? \"\")\r\n\r\n    const handleChange = React.useCallback(async (e: React.ChangeEvent<HTMLInputElement>) =>{\r\n        \r\n        if(e.target.files !== null && e.target.files[0]){\r\n           \r\n            const file = e.target.files[0]\r\n            console.log(file)\r\n            imageService.getBase64(file)\r\n        }\r\n    },[imageService])\r\n\r\n    return(\r\n        <Grid\r\n            item>\r\n            <img width={width} height={height} src={imageService.buffer?.toString()}/>\r\n            {!isReadOnly && (\r\n                <TextField hidden type='file' onChange={handleChange}/>\r\n            )}\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ImageInput"]},"metadata":{},"sourceType":"module"}