{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_administartion\\\\_logging\\\\loggingTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Table } from \"react-virtualized\";\nimport LoggingTableColunm from \"./loggingTableColunm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LogTable = props => {\n  _s();\n\n  const {\n    logmessages\n  } = props;\n  const rowGetter = React.useCallback(info => {\n    return logmessages[info.index];\n  }, [logmessages]);\n  const cellDataGetter = React.useCallback((colomnData, key, rowData) => {\n    return logmessages[colomnData];\n  }, [logmessages]);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    rowGetter: rowGetter,\n    ...props,\n    children: [LoggingTableColunm({\n      dataKey: \"id\",\n      width: 50,\n      cellDataGetter: cell => cellDataGetter(cell.columnData, cell.dataKey, cell.rowData)\n    }), LoggingTableColunm({\n      dataKey: \"type\",\n      width: 50,\n      cellDataGetter: cell => cellDataGetter(cell.columnData, cell.dataKey, cell.rowData)\n    }), LoggingTableColunm({\n      dataKey: \"message\",\n      width: 50,\n      cellDataGetter: cell => cellDataGetter(cell.columnData, cell.dataKey, cell.rowData)\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LogTable, \"HP6iLh+945sPkKOw1ZZxtqoa91I=\");\n\n_c = LogTable;\nexport default LogTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"LogTable\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingTable.tsx"],"names":["React","Table","LoggingTableColunm","LogTable","props","logmessages","rowGetter","useCallback","info","index","cellDataGetter","colomnData","key","rowData","dataKey","width","cell","columnData"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAgBC,KAAhB,QAAyC,mBAAzC;AAEA,OAAOC,kBAAP,MAA+B,sBAA/B;;;AAOA,MAAMC,QAA0B,GAAIC,KAAD,IAAU;AAAA;;AACzC,QAAM;AAACC,IAAAA;AAAD,MAAgBD,KAAtB;AAEA,QAAME,SAAS,GAAGN,KAAK,CAACO,WAAN,CAAmBC,IAAD,IAAgB;AAChD,WAAOH,WAAW,CAACG,IAAI,CAACC,KAAN,CAAlB;AACH,GAFiB,EAEhB,CAACJ,WAAD,CAFgB,CAAlB;AAIA,QAAMK,cAAc,GAAGV,KAAK,CAACO,WAAN,CAAkB,CAACI,UAAD,EAAkBC,GAAlB,EAA+BC,OAA/B,KAA+C;AACpF,WAAOR,WAAW,CAACM,UAAD,CAAlB;AACH,GAFsB,EAErB,CAACN,WAAD,CAFqB,CAAvB;AAKA,sBACI,QAAC,KAAD;AAAO,IAAA,SAAS,EAAEC,SAAlB;AAAA,OAAiCF,KAAjC;AAAA,eACKF,kBAAkB,CAAC;AAACY,MAAAA,OAAO,EAAE,IAAV;AAAgBC,MAAAA,KAAK,EAAE,EAAvB;AAA2BL,MAAAA,cAAc,EAAGM,IAAD,IAAUN,cAAc,CAACM,IAAI,CAACC,UAAN,EAAkBD,IAAI,CAACF,OAAvB,EAAgCE,IAAI,CAACH,OAArC;AAAnE,KAAD,CADvB,EAEKX,kBAAkB,CAAC;AAACY,MAAAA,OAAO,EAAE,MAAV;AAAkBC,MAAAA,KAAK,EAAE,EAAzB;AAA6BL,MAAAA,cAAc,EAAGM,IAAD,IAAUN,cAAc,CAACM,IAAI,CAACC,UAAN,EAAkBD,IAAI,CAACF,OAAvB,EAAgCE,IAAI,CAACH,OAArC;AAArE,KAAD,CAFvB,EAGKX,kBAAkB,CAAC;AAACY,MAAAA,OAAO,EAAE,SAAV;AAAqBC,MAAAA,KAAK,EAAE,EAA5B;AAAgCL,MAAAA,cAAc,EAAGM,IAAD,IAAUN,cAAc,CAACM,IAAI,CAACC,UAAN,EAAkBD,IAAI,CAACF,OAAvB,EAAgCE,IAAI,CAACH,OAArC;AAAxE,KAAD,CAHvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAnBD;;GAAMV,Q;;KAAAA,Q;AAqBN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\nimport { Index, Table, TableProps } from \"react-virtualized\";\r\nimport { ILogmessage } from \"./interfaces/ILogmessage\";\r\nimport LoggingTableColunm from \"./loggingTableColunm\";\r\n\r\n\r\ninterface IProps extends TableProps{\r\n    logmessages: ILogmessage[]\r\n}\r\n\r\nconst LogTable: React.FC<IProps> = (props) =>{\r\n    const {logmessages} = props\r\n\r\n    const rowGetter = React.useCallback((info: Index) =>{\r\n        return logmessages[info.index]\r\n    },[logmessages])\r\n\r\n    const cellDataGetter = React.useCallback((colomnData: any, key: string, rowData: any) =>{\r\n        return logmessages[colomnData]\r\n    },[logmessages])\r\n   \r\n\r\n    return(\r\n        <Table rowGetter={rowGetter} {...props}>\r\n            {LoggingTableColunm({dataKey: \"id\", width: 50, cellDataGetter: (cell) => cellDataGetter(cell.columnData, cell.dataKey, cell.rowData)})}\r\n            {LoggingTableColunm({dataKey: \"type\", width: 50, cellDataGetter: (cell) => cellDataGetter(cell.columnData, cell.dataKey, cell.rowData)})}\r\n            {LoggingTableColunm({dataKey: \"message\", width: 50, cellDataGetter: (cell) => cellDataGetter(cell.columnData, cell.dataKey, cell.rowData)})}\r\n        </Table>\r\n    )\r\n} \r\n\r\nexport default LogTable\r\n\r\n"]},"metadata":{},"sourceType":"module"}