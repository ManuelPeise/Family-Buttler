{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_administartion\\\\_logging\\\\loggingDataService.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useApi from '../../../_hooks/useApi';\nimport LoggingPageContainer from './loggingPageContainer';\nimport apiConfig from '../../../_config/apiConfig.json';\nimport { getLogMessageRow } from '../mapper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoggingDataservice = props => {\n  _s();\n\n  const logDataService = useApi({\n    serviceUri: apiConfig.baseUrl + apiConfig.administration.logging,\n    params: null\n  });\n  const [selectedItems, setSelectedItems] = React.useState([]);\n  const logMessageRows = React.useMemo(() => {\n    return logDataService.items.map(item => {\n      return getLogMessageRow(item);\n    });\n  }, [logDataService]);\n  const handleSelectedItemsChanged = React.useCallback(items => {\n    setSelectedItems(items);\n    console.log(selectedItems);\n  }, [selectedItems]);\n  const handleSelectAll = React.useCallback(() => {\n    if (selectedItems.length === logMessageRows.length) {\n      setSelectedItems([]);\n    } else {\n      setSelectedItems(logMessageRows.map(x => {\n        return x.id;\n      }));\n    }\n  }, [logMessageRows, selectedItems.length]);\n\n  if (logDataService.items[0] === undefined) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(LoggingPageContainer, {\n    logmessages: logMessageRows,\n    selectedItems: selectedItems,\n    handleSelectedItems: handleSelectedItemsChanged,\n    handleSelectAll: handleSelectAll\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoggingDataservice, \"tcDYVcj1Zs8NvaoNWDxMuDQIa1A=\", false, function () {\n  return [useApi];\n});\n\n_c = LoggingDataservice;\nexport default LoggingDataservice;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggingDataservice\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingDataService.tsx"],"names":["React","useApi","LoggingPageContainer","apiConfig","getLogMessageRow","LoggingDataservice","props","logDataService","serviceUri","baseUrl","administration","logging","params","selectedItems","setSelectedItems","useState","logMessageRows","useMemo","items","map","item","handleSelectedItemsChanged","useCallback","console","log","handleSelectAll","length","x","id","undefined"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,gBAAT,QAAiC,WAAjC;;;AAMA,MAAMC,kBAAoC,GAAIC,KAAD,IAAU;AAAA;;AAEnD,QAAMC,cAAc,GAAGN,MAAM,CAAc;AACvCO,IAAAA,UAAU,EAAEL,SAAS,CAACM,OAAV,GAAoBN,SAAS,CAACO,cAAV,CAAyBC,OADlB;AAEvCC,IAAAA,MAAM,EAAE;AAF+B,GAAd,CAA7B;AAKA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,KAAK,CAACe,QAAN,CAAyB,EAAzB,CAA1C;AAEA,QAAMC,cAAc,GAAGhB,KAAK,CAACiB,OAAN,CAAc,MAAK;AACtC,WAAOV,cAAc,CAACW,KAAf,CAAqBC,GAArB,CAA0BC,IAAD,IAAS;AACrC,aAAOhB,gBAAgB,CAACgB,IAAD,CAAvB;AACH,KAFM,CAAP;AAGH,GAJsB,EAIrB,CAACb,cAAD,CAJqB,CAAvB;AAMA,QAAMc,0BAA0B,GAAGrB,KAAK,CAACsB,WAAN,CAAmBJ,KAAD,IAAoB;AACtEJ,IAAAA,gBAAgB,CAACI,KAAD,CAAhB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYX,aAAZ;AACF,GAHkC,EAGjC,CAACA,aAAD,CAHiC,CAAnC;AAKA,QAAMY,eAAe,GAAGzB,KAAK,CAACsB,WAAN,CAAkB,MAAM;AAC5C,QAAGT,aAAa,CAACa,MAAd,KAAyBV,cAAc,CAACU,MAA3C,EAAkD;AAC9CZ,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACH,KAFD,MAEK;AACDA,MAAAA,gBAAgB,CAACE,cAAc,CAACG,GAAf,CAAoBQ,CAAD,IAAM;AACtC,eAAOA,CAAC,CAACC,EAAT;AACH,OAFgB,CAAD,CAAhB;AAGH;AACJ,GARuB,EAQtB,CAACZ,cAAD,EAAiBH,aAAa,CAACa,MAA/B,CARsB,CAAxB;;AAUA,MAAGnB,cAAc,CAACW,KAAf,CAAqB,CAArB,MAA4BW,SAA/B,EAAyC;AACrC,WAAO,IAAP;AACH;;AAED,sBACI,QAAC,oBAAD;AACI,IAAA,WAAW,EAAEb,cADjB;AAEI,IAAA,aAAa,EAAEH,aAFnB;AAGI,IAAA,mBAAmB,EAAEQ,0BAHzB;AAII,IAAA,eAAe,EAAEI;AAJrB;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA1CD;;GAAMpB,kB;UAEqBJ,M;;;KAFrBI,kB;AA4CN,eAAeA,kBAAf","sourcesContent":["import React from 'react'\r\nimport useApi from '../../../_hooks/useApi'\r\nimport { ILogmessage } from './interfaces/ILogmessage'\r\nimport LoggingPageContainer from './loggingPageContainer'\r\nimport apiConfig from '../../../_config/apiConfig.json'\r\nimport { getLogMessageRow } from '../mapper'\r\n\r\ninterface IProps{\r\n\r\n}\r\n\r\nconst LoggingDataservice: React.FC<IProps> = (props) =>{\r\n   \r\n    const logDataService = useApi<ILogmessage>({\r\n        serviceUri: apiConfig.baseUrl + apiConfig.administration.logging,\r\n        params: null\r\n    })\r\n\r\n    const [selectedItems, setSelectedItems] = React.useState<number[]>([])\r\n\r\n    const logMessageRows = React.useMemo(() =>{\r\n        return logDataService.items.map((item) =>{\r\n            return getLogMessageRow(item)\r\n        })\r\n    },[logDataService])\r\n\r\n    const handleSelectedItemsChanged = React.useCallback((items: number[]) =>{\r\n       setSelectedItems(items)\r\n       console.log(selectedItems)\r\n    },[selectedItems])\r\n\r\n    const handleSelectAll = React.useCallback(() => {\r\n        if(selectedItems.length === logMessageRows.length){\r\n            setSelectedItems([])\r\n        }else{\r\n            setSelectedItems(logMessageRows.map((x) =>{\r\n                return x.id\r\n            }))\r\n        }\r\n    },[logMessageRows, selectedItems.length])\r\n   \r\n    if(logDataService.items[0] === undefined){\r\n        return null\r\n    }\r\n    \r\n    return(\r\n        <LoggingPageContainer\r\n            logmessages={logMessageRows}\r\n            selectedItems={selectedItems}\r\n            handleSelectedItems={handleSelectedItemsChanged}\r\n            handleSelectAll={handleSelectAll}\r\n            />\r\n    )\r\n}\r\n\r\nexport default LoggingDataservice\r\n"]},"metadata":{},"sourceType":"module"}