{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_cookingBook\\\\IngredientListItem.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, makeStyles } from '@material-ui/core';\nimport MenuInputComponent from './MenueInputComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = makeStyles({\n  ingrdient_root: {\n    display: 'flex',\n    flexDirection: 'row',\n    maxWidth: '83vw',\n    overflow: 'hidden'\n  },\n  item: {}\n});\n\nconst IngrdientListtem = props => {\n  _s();\n\n  var _ingredient$amount, _ingredient$unit, _ingredient$name;\n\n  const {\n    ingredient,\n    isReadOnly,\n    values,\n    unitTypeItems,\n    onIngredientChanged\n  } = props;\n  const useStyle = styles();\n  const handleAmountChanged = React.useCallback(value => {\n    onIngredientChanged({ ...ingredient,\n      amount: parseInt(value)\n    });\n  }, [ingredient, onIngredientChanged]);\n  const handleNameChanged = React.useCallback(value => {\n    console.log(value);\n    onIngredientChanged({ ...ingredient,\n      name: value\n    });\n  }, [ingredient, onIngredientChanged]);\n  const handleUnitChanged = React.useCallback(value => {\n    onIngredientChanged({ ...ingredient,\n      unit: value\n    });\n  }, [ingredient, onIngredientChanged]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justifyContent: \"center\",\n    className: useStyle.ingrdient_root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      className: useStyle.item,\n      xs: 2,\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: values.amount,\n        fullWidth: true,\n        type: \"number\",\n        value: (_ingredient$amount = ingredient === null || ingredient === void 0 ? void 0 : ingredient.amount) !== null && _ingredient$amount !== void 0 ? _ingredient$amount : '',\n        isReadonly: isReadOnly,\n        onValueChanged: handleAmountChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      className: useStyle.item,\n      xs: 3,\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: values.unit,\n        fullWidth: true,\n        value: (_ingredient$unit = ingredient === null || ingredient === void 0 ? void 0 : ingredient.unit) !== null && _ingredient$unit !== void 0 ? _ingredient$unit : '',\n        isReadonly: isReadOnly,\n        hasSelect: true,\n        onSelectChanged: handleUnitChanged,\n        selectElements: unitTypeItems\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      className: useStyle.item,\n      xs: 4,\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: values.name,\n        fullWidth: true,\n        value: (_ingredient$name = ingredient === null || ingredient === void 0 ? void 0 : ingredient.name) !== null && _ingredient$name !== void 0 ? _ingredient$name : '',\n        isReadonly: isReadOnly,\n        onValueChanged: handleNameChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 8\n  }, this);\n};\n\n_s(IngrdientListtem, \"3TRVG0EWaa8aUVwnNPaYlyNKPwk=\");\n\n_c = IngrdientListtem;\nexport default IngrdientListtem;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngrdientListtem\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_cookingBook/IngredientListItem.tsx"],"names":["React","Grid","makeStyles","MenuInputComponent","styles","ingrdient_root","display","flexDirection","maxWidth","overflow","item","IngrdientListtem","props","ingredient","isReadOnly","values","unitTypeItems","onIngredientChanged","useStyle","handleAmountChanged","useCallback","value","amount","parseInt","handleNameChanged","console","log","name","handleUnitChanged","unit"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {IIngredient} from '../../_interfaces/IMenu'\r\nimport {Grid, makeStyles} from '@material-ui/core'\r\nimport MenuInputComponent from './MenueInputComponent'\r\nimport { ICookingBookValues } from '../../_interfaces/ICookingBookValues'\r\n\r\nconst styles = makeStyles({\r\n    ingrdient_root:{\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        maxWidth: '83vw',\r\n        overflow:'hidden'\r\n    },\r\n    item:{\r\n    }\r\n})\r\n\r\ninterface IProps{\r\n    ingredient: IIngredient\r\n    isReadOnly: boolean\r\n    values: ICookingBookValues\r\n    unitTypeItems: JSX.Element[]\r\n    onIngredientChanged: (ingredient: IIngredient) => void\r\n}\r\n\r\n\r\nconst IngrdientListtem: React.FC<IProps> = (props) => {\r\n\r\n    const {ingredient, isReadOnly, values, unitTypeItems, onIngredientChanged} = props\r\n\r\n    const useStyle = styles()\r\n\r\n    const handleAmountChanged = React.useCallback((value: string) => {\r\n       \r\n        onIngredientChanged({...ingredient, amount: parseInt(value)})\r\n    },[ingredient, onIngredientChanged])\r\n\r\n    const handleNameChanged = React.useCallback((value: string) => {\r\n        console.log(value)\r\n    \r\n        onIngredientChanged({...ingredient, name: value})\r\n    },[ingredient, onIngredientChanged])\r\n\r\n    const handleUnitChanged = React.useCallback((value: number) => {\r\n       \r\n        onIngredientChanged({...ingredient, unit: value})\r\n    },[ingredient, onIngredientChanged])\r\n\r\n\r\n\r\n    return(\r\n       <Grid \r\n            container\r\n            justifyContent='center'\r\n            className={useStyle.ingrdient_root}>\r\n                <Grid\r\n                    className={useStyle.item}\r\n                    xs={2}\r\n                    item>\r\n                    <MenuInputComponent\r\n                        label={values.amount}\r\n                        fullWidth={true}\r\n                        type='number'\r\n                        value={ingredient?.amount?? ''}\r\n                        isReadonly= {isReadOnly}\r\n                        onValueChanged={handleAmountChanged}/>\r\n                </Grid>\r\n                <Grid\r\n                    className={useStyle.item}\r\n                    xs={3}\r\n                    item>\r\n                     <MenuInputComponent\r\n                        label={values.unit}\r\n                        fullWidth={true}\r\n                        value={ingredient?.unit?? ''}\r\n                        isReadonly= {isReadOnly}\r\n                        hasSelect={true}\r\n                        onSelectChanged={handleUnitChanged}\r\n                        selectElements={unitTypeItems}\r\n                        />\r\n                </Grid>\r\n                <Grid\r\n                    className={useStyle.item}\r\n                    xs={4}\r\n                    item>\r\n                    <MenuInputComponent\r\n                        label={values.name}\r\n                        fullWidth={true}\r\n                        value={ingredient?.name?? ''}\r\n                        isReadonly= {isReadOnly}\r\n                        onValueChanged={handleNameChanged}/>\r\n                </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default IngrdientListtem"]},"metadata":{},"sourceType":"module"}