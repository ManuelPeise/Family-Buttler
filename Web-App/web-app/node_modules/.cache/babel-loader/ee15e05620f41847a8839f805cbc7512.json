{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_administartion\\\\_logging\\\\loggingDataService.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport useApi from '../../../_hooks/useApi';\nimport LoggingPageContainer from './loggingPageContainer';\nimport apiConfig from '../../../_config/apiConfig.json';\nimport { useDispatch } from 'react-redux';\nimport { SetLogMessages } from '../../../_redux/_appStateStore/appStoreAccessor';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LoggingDataservice = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const logDataService = useApi({\n    serviceUri: apiConfig.baseUrl + apiConfig.administration.getLogmessages,\n    params: null\n  });\n  const [selectedItems, setSelectedItems] = React.useState({\n    allSelected: false,\n    ids: []\n  }); // const logMessageRows = React.useMemo(() =>{\n  //     return logDataService.items.map((item) =>{\n  //         return getLogMessageRow(item)\n  //     })\n  // },[logDataService])\n\n  const handleSelectedItemsChanged = React.useCallback(items => {\n    setSelectedItems({\n      allSelected: logMessageRows.length === items.length && items !== [],\n      ids: items\n    });\n  }, [logMessageRows.length]);\n  const handleSelectAll = React.useCallback(() => {\n    var _selectedItems$ids;\n\n    if (selectedItems !== null && selectedItems !== void 0 && (_selectedItems$ids = selectedItems.ids) !== null && _selectedItems$ids !== void 0 && _selectedItems$ids.length) {\n      setSelectedItems({\n        allSelected: false,\n        ids: []\n      });\n      return;\n    }\n\n    const items = logDataService.items.map(msg => {\n      return msg.id;\n    });\n    setSelectedItems({\n      allSelected: items.length === logDataService.items.length,\n      ids: items\n    });\n  }, [logDataService.items, selectedItems.ids.length]);\n  const deleteLogmessages = React.useCallback(async () => {\n    await logDataService.post({\n      serviceUri: apiConfig.baseUrl + apiConfig.administration.deleteLogmessages,\n      params: selectedItems.ids\n    });\n  }, [logDataService, selectedItems.ids]);\n  const onCancel = React.useCallback(() => {\n    setSelectedItems({\n      allSelected: false,\n      ids: []\n    });\n  }, []);\n\n  if (logDataService.items[0] === undefined) {\n    return null;\n  }\n\n  dispatch(SetLogMessages(logDataService.items));\n  return /*#__PURE__*/_jsxDEV(LoggingPageContainer, {\n    selectedItems: selectedItems,\n    handleSelectedItems: handleSelectedItemsChanged,\n    handleSelectAll: handleSelectAll,\n    deleteLogmessages: deleteLogmessages,\n    onCancel: onCancel\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LoggingDataservice, \"58gDau67zy9jZ5TzDfztfbjG8Ms=\", false, function () {\n  return [useDispatch, useApi];\n});\n\n_c = LoggingDataservice;\nexport default LoggingDataservice;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoggingDataservice\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_administartion/_logging/loggingDataService.tsx"],"names":["React","useApi","LoggingPageContainer","apiConfig","useDispatch","SetLogMessages","LoggingDataservice","props","dispatch","logDataService","serviceUri","baseUrl","administration","getLogmessages","params","selectedItems","setSelectedItems","useState","allSelected","ids","handleSelectedItemsChanged","useCallback","items","logMessageRows","length","handleSelectAll","map","msg","id","deleteLogmessages","post","onCancel","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport useApi from '../../../_hooks/useApi'\r\nimport { ILogmessage } from './interfaces/ILogmessage'\r\nimport LoggingPageContainer from './loggingPageContainer'\r\nimport apiConfig from '../../../_config/apiConfig.json'\r\nimport { getLogMessageRow } from '../mapper'\r\nimport { useDispatch } from 'react-redux'\r\nimport { SetLogMessages } from '../../../_redux/_appStateStore/appStoreAccessor'\r\n\r\nexport interface ILogMessageTableState{\r\n    allSelected: boolean\r\n    ids: number[] \r\n}\r\ninterface IProps{\r\n\r\n}\r\n\r\nconst LoggingDataservice: React.FC<IProps> = (props) =>{\r\n   \r\n    const dispatch = useDispatch();\r\n\r\n    const logDataService = useApi<ILogmessage>({\r\n        serviceUri: apiConfig.baseUrl + apiConfig.administration.getLogmessages,\r\n        params: null\r\n    })\r\n\r\n    const [selectedItems, setSelectedItems] = React.useState<ILogMessageTableState>({allSelected: false, ids:[]})\r\n\r\n    // const logMessageRows = React.useMemo(() =>{\r\n    //     return logDataService.items.map((item) =>{\r\n    //         return getLogMessageRow(item)\r\n    //     })\r\n    // },[logDataService])\r\n\r\n    const handleSelectedItemsChanged = React.useCallback((items: number[]) =>{\r\n        setSelectedItems({allSelected: logMessageRows.length === items.length && items !== [], ids: items})\r\n    },[logMessageRows.length])\r\n\r\n    const handleSelectAll = React.useCallback(() => {\r\n        if(selectedItems?.ids?.length){\r\n            setSelectedItems({allSelected: false, ids:[]})\r\n\r\n            return\r\n        }\r\n        const items = logDataService.items.map((msg) =>{\r\n                return msg.id\r\n        })\r\n        \r\n        setSelectedItems({allSelected: items.length === logDataService.items.length, ids: items})\r\n    },[logDataService.items, selectedItems.ids.length])\r\n   \r\n    const deleteLogmessages = React.useCallback(async () =>{\r\n        await logDataService.post({\r\n            serviceUri:apiConfig.baseUrl + apiConfig.administration.deleteLogmessages,\r\n            params: selectedItems.ids\r\n        })\r\n    },[logDataService, selectedItems.ids])\r\n\r\n    const onCancel = React.useCallback(() =>{\r\n        setSelectedItems({allSelected:false, ids:[]})\r\n    },[])\r\n\r\n    if(logDataService.items[0] === undefined){\r\n        return null\r\n    }\r\n    \r\n    dispatch(SetLogMessages(logDataService.items))\r\n\r\n    return(\r\n        <LoggingPageContainer\r\n            selectedItems={selectedItems}\r\n            handleSelectedItems={handleSelectedItemsChanged}\r\n            handleSelectAll={handleSelectAll}\r\n            deleteLogmessages={deleteLogmessages}\r\n            onCancel={onCancel}\r\n            />\r\n    )\r\n}\r\n\r\nexport default LoggingDataservice\r\n"]},"metadata":{},"sourceType":"module"}