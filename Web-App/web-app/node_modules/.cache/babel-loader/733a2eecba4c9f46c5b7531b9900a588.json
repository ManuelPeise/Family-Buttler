{"ast":null,"code":"var _jsxFileName = \"D:\\\\Development\\\\WorkFolder\\\\FamilyButtler\\\\Family-Buttler\\\\Web-App\\\\web-app\\\\src\\\\_pages\\\\_cookingBook\\\\MenuContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport MenuInputComponent from './MenueInputComponent';\nimport { MenuTypeEnum } from '../../_enums/menuEnums';\nimport { Grid, makeStyles, MenuItem } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = makeStyles({\n  rootContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    width: 'auto',\n    height: 'auto'\n  },\n  menuContainer: {\n    maxHeight: '70vh'\n  }\n});\n\nconst MenuContainer = props => {\n  _s();\n\n  var _menu$name, _menu$description, _menu$howTo, _menu$menuType;\n\n  const {\n    selectedMenu\n  } = props;\n  const [menu, setMenu] = React.useState({});\n  const useStyle = styles();\n  const onTitleChanged = React.useCallback(name => {\n    const data = { ...menu,\n      name\n    };\n    setMenu(data);\n  }, [menu]);\n  const onDescriptionChanged = React.useCallback(description => {\n    const data = { ...menu,\n      description\n    };\n    setMenu(data);\n  }, [menu]);\n  const onHowToChanged = React.useCallback(howTo => {\n    const data = { ...menu,\n      howTo\n    };\n    setMenu(data);\n  }, [menu]);\n  const onMenuTypeChanged = React.useCallback(value => {\n    const data = { ...menu,\n      menuType: value\n    };\n    setMenu(data);\n  }, [menu]);\n  const menuTypes = React.useMemo(() => {\n    const elements = [];\n    elements.push( /*#__PURE__*/_jsxDEV(MenuItem, {\n      id: \"-1\",\n      value: -1,\n      selected: menu.menuType === MenuTypeEnum.None,\n      children: \"Select Menu Type\"\n    }, -1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 23\n    }, this));\n    elements.push( /*#__PURE__*/_jsxDEV(MenuItem, {\n      id: '0',\n      value: 0,\n      selected: menu.menuType === MenuTypeEnum.Pasta,\n      children: MenuTypeEnum[MenuTypeEnum.Pasta]\n    }, 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }, this));\n    elements.push( /*#__PURE__*/_jsxDEV(MenuItem, {\n      id: '4',\n      value: 4,\n      selected: menu.menuType === MenuTypeEnum.Meat,\n      children: MenuTypeEnum[MenuTypeEnum.Meat]\n    }, 1, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 23\n    }, this));\n    elements.push( /*#__PURE__*/_jsxDEV(MenuItem, {\n      id: '3',\n      value: 3,\n      selected: menu.menuType === MenuTypeEnum.Other,\n      children: MenuTypeEnum[MenuTypeEnum.Other]\n    }, 2, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 23\n    }, this));\n    return elements;\n  }, [menu.menuType]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: useStyle.rootContainer,\n    container: true,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      className: useStyle.menuContainer,\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: \"Name\",\n        value: (_menu$name = menu === null || menu === void 0 ? void 0 : menu.name) !== null && _menu$name !== void 0 ? _menu$name : \"\",\n        isReadonly: false,\n        onValueChanged: onTitleChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: \"Description\",\n        isMultiRow: true,\n        maxRows: 5,\n        fullWidth: true,\n        value: (_menu$description = menu === null || menu === void 0 ? void 0 : menu.description) !== null && _menu$description !== void 0 ? _menu$description : \"\",\n        isReadonly: false,\n        onValueChanged: onDescriptionChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: \"How To\",\n        isMultiRow: true,\n        maxRows: 5,\n        fullWidth: true,\n        value: (_menu$howTo = menu === null || menu === void 0 ? void 0 : menu.howTo) !== null && _menu$howTo !== void 0 ? _menu$howTo : \"\",\n        isReadonly: false,\n        onValueChanged: onHowToChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MenuInputComponent, {\n        label: \"Menu Type\",\n        isMultiRow: true,\n        maxRows: 5,\n        fullWidth: true,\n        value: (_menu$menuType = menu.menuType) !== null && _menu$menuType !== void 0 ? _menu$menuType : -1,\n        isReadonly: false,\n        hasSelect: true,\n        selectElements: menuTypes,\n        onSelectChanged: onMenuTypeChanged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this) //     container>\n  //     <Paper\n  //         className={useStyle.root}>\n  //         <Grid\n  //             justifyContent='center'\n  //             item\n  //             container>\n  //             <MenuInputComponent\n  //                     label='Name'\n  //                     value={menu?.name?? \"\"} \n  //                     isReadonly={false}\n  //                     onValueChanged={onTitleChanged} />\n  //                 <MenuInputComponent\n  //                     label='Description'\n  //                     isMultiRow={true}\n  //                     maxRows={5}\n  //                     fullWidth={true} \n  //                     value={menu?.description?? \"\"} \n  //                     isReadonly={false}\n  //                     onValueChanged={onDescriptionChanged}/>\n  //                 <MenuInputComponent\n  //                     label='How To'\n  //                     isMultiRow={true}\n  //                     maxRows={5}\n  //                     fullWidth={true} \n  //                     value={menu?.howTo?? \"\"} \n  //                     isReadonly={false}\n  //                     onValueChanged={onHowToChanged}/>\n  //                 <MenuInputComponent\n  //                     label='Menu Type'\n  //                     isMultiRow={true}\n  //                     maxRows={5}\n  //                     fullWidth={true} \n  //                     value={menu.menuType ?? -1} \n  //                     isReadonly={false}\n  //                     hasSelect={true}\n  //                     selectElements={menuTypes}\n  //                     onSelectChanged={onMenuTypeChanged}/>\n  //         </Grid>\n  //                 {menu?.ingredients?.length && (\n  //                     <List>\n  //                         {menu.ingredients.map((ing, index) =>{\n  //                             return(\n  //                                 <IngrdientListtem key = {index} ingredient={ing} isReadOnly={false}/>\n  //                             )\n  //                         })}\n  //                     </List>\n  //                 )}\n  //                 {!menu?.ingredients?.length &&(\n  //                     <List subheader={<ListSubheader>Test</ListSubheader>} style={{ maxWidth:'60vw' }}>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\n  //                     </List>\n  //                 )}\n  //     </Paper>\n  // </Grid>\n  ;\n};\n\n_s(MenuContainer, \"Xys+beIF/HcqctEEMX1g56WfRio=\");\n\n_c = MenuContainer;\nexport default MenuContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MenuContainer\");","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_pages/_cookingBook/MenuContainer.tsx"],"names":["React","MenuInputComponent","MenuTypeEnum","Grid","makeStyles","MenuItem","styles","rootContainer","display","flexDirection","width","height","menuContainer","maxHeight","MenuContainer","props","selectedMenu","menu","setMenu","useState","useStyle","onTitleChanged","useCallback","name","data","onDescriptionChanged","description","onHowToChanged","howTo","onMenuTypeChanged","value","menuType","menuTypes","useMemo","elements","push","None","Pasta","Meat","Other"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PageBodyLayout from '../../_layout/pageBodyLayout'\r\nimport MenuInputComponent from './MenueInputComponent'\r\nimport {IMenu} from '../../_interfaces/IMenu'\r\nimport { MenuTypeEnum } from '../../_enums/menuEnums'\r\nimport { Grid, makeStyles, MenuItem, List, Paper, ListSubheader } from '@material-ui/core'\r\nimport IngrdientListtem from './IngredientListItem'\r\n\r\ninterface IProps{\r\n    selectedMenu: IMenu\r\n}\r\n\r\nconst styles = makeStyles({\r\n    rootContainer:{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width:'auto',\r\n        height:'auto'\r\n    },\r\n    menuContainer:{\r\n        maxHeight: '70vh',\r\n    }\r\n})\r\n\r\nconst MenuContainer: React.FC<IProps> = (props) =>{\r\n\r\n    const {selectedMenu} = props\r\n\r\n    const [menu, setMenu] = React.useState<IMenu>({} as IMenu)\r\n\r\n    const useStyle = styles()\r\n\r\n    const onTitleChanged = React.useCallback((name: string) =>{\r\n        const data: IMenu = {...menu, name}\r\n        setMenu(data)\r\n    },[menu])\r\n\r\n    const onDescriptionChanged = React.useCallback((description: string) =>{\r\n        const data: IMenu = {...menu, description}\r\n        setMenu(data)\r\n    },[menu])\r\n\r\n    const onHowToChanged = React.useCallback((howTo: string) =>{\r\n        const data: IMenu = {...menu, howTo}\r\n        setMenu(data)\r\n    },[menu])\r\n\r\n    const onMenuTypeChanged = React.useCallback((value: number) =>{\r\n        const data: IMenu = {...menu, menuType: value}\r\n        setMenu(data)\r\n    },[menu])\r\n\r\n    const menuTypes = React.useMemo(() => {\r\n        const elements = [] as JSX.Element[]\r\n\r\n        elements.push(<MenuItem key = {-1} id='-1' value={-1} selected={menu.menuType === MenuTypeEnum.None}>Select Menu Type</MenuItem>)\r\n        elements.push(<MenuItem key = {0} id={'0'} value = {0} selected={menu.menuType === MenuTypeEnum.Pasta} >{MenuTypeEnum[MenuTypeEnum.Pasta]}</MenuItem>)\r\n        elements.push(<MenuItem key = {1} id={'4'} value={4} selected={menu.menuType === MenuTypeEnum.Meat} >{MenuTypeEnum[MenuTypeEnum.Meat]}</MenuItem>)\r\n        elements.push(<MenuItem key = {2} id={'3'} value={3} selected={menu.menuType === MenuTypeEnum.Other} >{MenuTypeEnum[MenuTypeEnum.Other]}</MenuItem>)\r\n\r\n        return elements\r\n    },[menu.menuType])\r\n\r\n    return(\r\n        <Grid\r\n            className={useStyle.rootContainer}\r\n            container>\r\n            <Grid\r\n                className={useStyle.menuContainer}\r\n                container>\r\n                    <MenuInputComponent\r\n                                label='Name'\r\n                                value={menu?.name?? \"\"} \r\n                                isReadonly={false}\r\n                                onValueChanged={onTitleChanged} />\r\n                    <MenuInputComponent\r\n                                label='Description'\r\n                                isMultiRow={true}\r\n                                maxRows={5}\r\n                                fullWidth={true} \r\n                                value={menu?.description?? \"\"} \r\n                                isReadonly={false}\r\n                                onValueChanged={onDescriptionChanged}/>\r\n                    <MenuInputComponent\r\n                                label='How To'\r\n                                isMultiRow={true}\r\n                                maxRows={5}\r\n                                fullWidth={true} \r\n                                value={menu?.howTo?? \"\"} \r\n                                isReadonly={false}\r\n                                onValueChanged={onHowToChanged}/>\r\n                    <MenuInputComponent\r\n                                label='Menu Type'\r\n                                isMultiRow={true}\r\n                                maxRows={5}\r\n                                fullWidth={true} \r\n                                value={menu.menuType ?? -1} \r\n                                isReadonly={false}\r\n                                hasSelect={true}\r\n                                selectElements={menuTypes}\r\n                                onSelectChanged={onMenuTypeChanged}/>\r\n            </Grid>\r\n        </Grid>\r\n        //     container>\r\n        //     <Paper\r\n        //         className={useStyle.root}>\r\n        //         <Grid\r\n        //             justifyContent='center'\r\n        //             item\r\n        //             container>\r\n        //             <MenuInputComponent\r\n        //                     label='Name'\r\n        //                     value={menu?.name?? \"\"} \r\n        //                     isReadonly={false}\r\n        //                     onValueChanged={onTitleChanged} />\r\n        //                 <MenuInputComponent\r\n        //                     label='Description'\r\n        //                     isMultiRow={true}\r\n        //                     maxRows={5}\r\n        //                     fullWidth={true} \r\n        //                     value={menu?.description?? \"\"} \r\n        //                     isReadonly={false}\r\n        //                     onValueChanged={onDescriptionChanged}/>\r\n        //                 <MenuInputComponent\r\n        //                     label='How To'\r\n        //                     isMultiRow={true}\r\n        //                     maxRows={5}\r\n        //                     fullWidth={true} \r\n        //                     value={menu?.howTo?? \"\"} \r\n        //                     isReadonly={false}\r\n        //                     onValueChanged={onHowToChanged}/>\r\n        //                 <MenuInputComponent\r\n        //                     label='Menu Type'\r\n        //                     isMultiRow={true}\r\n        //                     maxRows={5}\r\n        //                     fullWidth={true} \r\n        //                     value={menu.menuType ?? -1} \r\n        //                     isReadonly={false}\r\n        //                     hasSelect={true}\r\n        //                     selectElements={menuTypes}\r\n        //                     onSelectChanged={onMenuTypeChanged}/>\r\n        //         </Grid>\r\n        //                 {menu?.ingredients?.length && (\r\n        //                     <List>\r\n        //                         {menu.ingredients.map((ing, index) =>{\r\n        //                             return(\r\n        //                                 <IngrdientListtem key = {index} ingredient={ing} isReadOnly={false}/>\r\n        //                             )\r\n        //                         })}\r\n        //                     </List>\r\n        //                 )}\r\n        //                 {!menu?.ingredients?.length &&(\r\n        //                     <List subheader={<ListSubheader>Test</ListSubheader>} style={{ maxWidth:'60vw' }}>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                         <IngrdientListtem key = {0} ingredient={null} isReadOnly={false}/>\r\n        //                     </List>\r\n        //                 )}\r\n        //     </Paper>\r\n        // </Grid>\r\n    )\r\n}\r\n\r\nexport default MenuContainer  "]},"metadata":{},"sourceType":"module"}