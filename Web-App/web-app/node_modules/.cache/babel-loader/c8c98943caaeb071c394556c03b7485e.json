{"ast":null,"code":"import React from'react';import{TextField}from'@material-ui/core';import{jsx as _jsx}from\"react/jsx-runtime\";var InputTextField=function InputTextField(props){var value=props.value,type=props.type,label=props.label,maxRows=props.maxRows,multiLine=props.multiLine,fullWidth=props.fullWidth,isReadOnly=props.isReadOnly,hasSelect=props.hasSelect,selectElements=props.selectElements,hasErrorOption=props.hasErrorOption,errorText=props.errorText,onSelect=props.onSelect,onValueChange=props.onValueChange;var handleValueChanged=React.useCallback(function(e){if(onValueChange!==undefined)onValueChange(e.currentTarget.value);},[onValueChange]);var onSelectChanged=React.useCallback(function(e){if(onSelect!==undefined){onSelect(parseInt(e.currentTarget.id));}},[onSelect]);return/*#__PURE__*/_jsx(TextField,{disabled:isReadOnly,fullWidth:fullWidth,multiline:multiLine,maxRows:maxRows,label:label,type:type!==null&&type!==void 0?type:'text',value:value,select:hasSelect,error:hasErrorOption,helperText:hasErrorOption&&errorText!==null&&errorText!==void 0&&errorText.length?errorText:\"\",onChange:hasSelect===undefined?handleValueChanged:onSelectChanged,children:hasSelect&&(selectElements===null||selectElements===void 0?void 0:selectElements.map(function(element){return element;}))});};export default InputTextField;","map":{"version":3,"sources":["D:/Development/WorkFolder/FamilyButtler/Family-Buttler/Web-App/web-app/src/_components/_inputs/InputTextField.tsx"],"names":["React","TextField","InputTextField","props","value","type","label","maxRows","multiLine","fullWidth","isReadOnly","hasSelect","selectElements","hasErrorOption","errorText","onSelect","onValueChange","handleValueChanged","useCallback","e","undefined","currentTarget","onSelectChanged","parseInt","id","length","map","element"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,SAAR,KAAwB,mBAAxB,C,2CAkBA,GAAMC,CAAAA,cAAgC,CAAG,QAAnCA,CAAAA,cAAmC,CAACC,KAAD,CAAU,CAE/C,GAAOC,CAAAA,KAAP,CAAsJD,KAAtJ,CAAOC,KAAP,CAAcC,IAAd,CAAsJF,KAAtJ,CAAcE,IAAd,CAAoBC,KAApB,CAAsJH,KAAtJ,CAAoBG,KAApB,CAA2BC,OAA3B,CAAsJJ,KAAtJ,CAA2BI,OAA3B,CAAoCC,SAApC,CAAsJL,KAAtJ,CAAoCK,SAApC,CAA+CC,SAA/C,CAAsJN,KAAtJ,CAA+CM,SAA/C,CAAyDC,UAAzD,CAAsJP,KAAtJ,CAAyDO,UAAzD,CAAqEC,SAArE,CAAsJR,KAAtJ,CAAqEQ,SAArE,CAAgFC,cAAhF,CAAsJT,KAAtJ,CAAgFS,cAAhF,CAAgGC,cAAhG,CAAsJV,KAAtJ,CAAgGU,cAAhG,CAAgHC,SAAhH,CAAsJX,KAAtJ,CAAgHW,SAAhH,CAA2HC,QAA3H,CAAsJZ,KAAtJ,CAA2HY,QAA3H,CAAqIC,aAArI,CAAsJb,KAAtJ,CAAqIa,aAArI,CAEA,GAAMC,CAAAA,kBAAkB,CAAGjB,KAAK,CAACkB,WAAN,CAAkB,SAACC,CAAD,CAA2C,CAEpF,GAAGH,aAAa,GAAKI,SAArB,CACIJ,aAAa,CAACG,CAAC,CAACE,aAAF,CAAgBjB,KAAjB,CAAb,CACP,CAJ0B,CAIzB,CAACY,aAAD,CAJyB,CAA3B,CAMA,GAAMM,CAAAA,eAAe,CAAGtB,KAAK,CAACkB,WAAN,CAAkB,SAACC,CAAD,CAA2C,CACjF,GAAGJ,QAAQ,GAAKK,SAAhB,CAA0B,CACtBL,QAAQ,CAACQ,QAAQ,CAACJ,CAAC,CAACE,aAAF,CAAgBG,EAAjB,CAAT,CAAR,CACH,CACJ,CAJuB,CAItB,CAACT,QAAD,CAJsB,CAAxB,CAMA,mBACI,KAAC,SAAD,EACI,QAAQ,CAAEL,UADd,CAEI,SAAS,CAAID,SAFjB,CAGI,SAAS,CAAED,SAHf,CAII,OAAO,CAAED,OAJb,CAKI,KAAK,CAAID,KALb,CAMI,IAAI,CAAED,IAAF,SAAEA,IAAF,UAAEA,IAAF,CAAS,MANjB,CAOI,KAAK,CAAED,KAPX,CAQI,MAAM,CAAEO,SARZ,CASI,KAAK,CAAIE,cATb,CAUI,UAAU,CAAEA,cAAc,EAAIC,SAAJ,SAAIA,SAAJ,WAAIA,SAAS,CAAEW,MAA7B,CAAsCX,SAAtC,CAAkD,EAVlE,CAWI,QAAQ,CAAEH,SAAS,GAAKS,SAAd,CAA0BH,kBAA1B,CAA+CK,eAX7D,UAYKX,SAAS,GACPC,cADO,SACPA,cADO,iBACPA,cAAc,CAAEc,GAAhB,CAAoB,SAACC,OAAD,CAAY,CAC5B,MAAOA,CAAAA,OAAP,CACH,CAFD,CADO,CAZd,EADJ,CAoBH,CApCD,CAsCA,cAAezB,CAAAA,cAAf","sourcesContent":["import React from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ninterface IProps{\r\n    value: string | number\r\n    type?: string\r\n    label: string\r\n    maxRows?: number\r\n    multiLine?: boolean\r\n    fullWidth?: boolean\r\n    isReadOnly?:boolean\r\n    hasSelect?: boolean\r\n    selectElements?: JSX.Element[]\r\n    hasErrorOption?: boolean\r\n    errorText?: string\r\n    onValueChange?: (value: string) => void\r\n    onSelect?: (value: number) => void\r\n}\r\n\r\nconst InputTextField: React.FC<IProps> = (props) =>{\r\n\r\n    const {value, type, label, maxRows, multiLine, fullWidth,isReadOnly, hasSelect, selectElements, hasErrorOption, errorText, onSelect, onValueChange} = props\r\n    \r\n    const handleValueChanged = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) =>{\r\n        \r\n        if(onValueChange !== undefined)\r\n            onValueChange(e.currentTarget.value as string)\r\n    },[onValueChange])\r\n\r\n    const onSelectChanged = React.useCallback((e: React.ChangeEvent<HTMLInputElement>) =>{\r\n        if(onSelect !== undefined){\r\n            onSelect(parseInt(e.currentTarget.id))\r\n        }\r\n    },[onSelect])\r\n    \r\n    return(\r\n        <TextField\r\n            disabled={isReadOnly}\r\n            fullWidth = {fullWidth}\r\n            multiline={multiLine}\r\n            maxRows={maxRows}\r\n            label = {label}\r\n            type={type?? 'text'}\r\n            value={value}\r\n            select={hasSelect}\r\n            error = {hasErrorOption}\r\n            helperText={hasErrorOption && errorText?.length ? errorText : \"\"}\r\n            onChange={hasSelect === undefined ? handleValueChanged : onSelectChanged}>\r\n            {hasSelect && (\r\n               selectElements?.map((element) =>{\r\n                   return element\r\n               })\r\n            )}\r\n        </TextField>\r\n    )\r\n}\r\n\r\nexport default InputTextField"]},"metadata":{},"sourceType":"module"}